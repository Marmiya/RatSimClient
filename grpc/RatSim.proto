syntax = "proto3";

package RatSim;

// Attention: The coordinates are left-handed, x is forward, y is right, z is up

// Public:
message Point {
  float x = 1;
  float y = 2;
  float z = 3;
}

message PointWithColor {
  Point point = 1;
  uint32 color = 2;
}

message PointCloudWithColor {
  repeated PointWithColor data = 1;
}

message EmptyRequest {
}

message Odometry {
  Pose pose = 1;
  twist twist = 2;
}

message Status {
  bool status = 1;
}

message RobotName {
  string name = 1;
}

// Mesh:
message MeshData {
  bytes data = 1;           // Binary mesh data
  uint32 format = 2;        // Format identifier
  uint32 version = 3;       // Format version
  bool simplified = 4;      // Whether mesh is simplified
  Pose transform = 5;       // Mesh world transform
}

message MeshDataWithOdom {
  MeshData mesh = 1;
  Odometry odom = 2;
}

// Lidar:
message Pose {
  float x = 1;
  float y = 2;
  float z = 3;
  float roll = 4;
  float pitch = 5;
  float yaw = 6;
}

message twist{
  float linear_x = 1;
  float linear_y = 2;
  float linear_z = 3;
  float angular_x = 4;
  float angular_y = 5;
  float angular_z = 6;
}

message LidarPoint {
  float x = 1;
  float y = 2;
  float z = 3;
  int32 hit = 4;
}

message LidarData {
  repeated LidarPoint data = 1;
}

message LidarDataAndOdom {
  LidarData data = 1;
  Odometry odom = 2;
}

// Depth Camera:
message DepthCameraPointData {
  repeated Point data = 1;
}

message DepthCameraImageData {
  repeated float data = 1;
}

// Services:
service LidarService {
  rpc GetLiDARData (RobotName) returns (LidarData);
  rpc GetLiDAROdom (RobotName) returns (Odometry);
  rpc GetLiDARDataAndOdom (RobotName) returns (LidarDataAndOdom);
}

service MeshService {
  rpc SendMesh (MeshData) returns (Status);
}

service PointCloudService {
  rpc SendPointCloudWithColor (PointCloudWithColor) returns (Status);
}

service DepthCameraService {
  rpc GetDepthCameraPointData (EmptyRequest) returns (DepthCameraPointData);
  rpc GetDepthCameraImageData (EmptyRequest) returns (DepthCameraImageData);
  rpc GetDepthCameraOdom (EmptyRequest) returns (Odometry);
}