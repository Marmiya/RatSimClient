# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import RatSim_pb2 as RatSim__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in RatSim_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LidarServiceStub(object):
    """Services:
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLiDARData = channel.unary_unary(
                '/RatSim.LidarService/GetLiDARData',
                request_serializer=RatSim__pb2.EmptyRequest.SerializeToString,
                response_deserializer=RatSim__pb2.LidarData.FromString,
                _registered_method=True)
        self.GetLiDAROdom = channel.unary_unary(
                '/RatSim.LidarService/GetLiDAROdom',
                request_serializer=RatSim__pb2.EmptyRequest.SerializeToString,
                response_deserializer=RatSim__pb2.Odometry.FromString,
                _registered_method=True)
        self.GetLiDARDataAndOdom = channel.unary_unary(
                '/RatSim.LidarService/GetLiDARDataAndOdom',
                request_serializer=RatSim__pb2.EmptyRequest.SerializeToString,
                response_deserializer=RatSim__pb2.LidarDataAndOdom.FromString,
                _registered_method=True)


class LidarServiceServicer(object):
    """Services:
    """

    def GetLiDARData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLiDAROdom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLiDARDataAndOdom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LidarServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLiDARData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLiDARData,
                    request_deserializer=RatSim__pb2.EmptyRequest.FromString,
                    response_serializer=RatSim__pb2.LidarData.SerializeToString,
            ),
            'GetLiDAROdom': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLiDAROdom,
                    request_deserializer=RatSim__pb2.EmptyRequest.FromString,
                    response_serializer=RatSim__pb2.Odometry.SerializeToString,
            ),
            'GetLiDARDataAndOdom': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLiDARDataAndOdom,
                    request_deserializer=RatSim__pb2.EmptyRequest.FromString,
                    response_serializer=RatSim__pb2.LidarDataAndOdom.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RatSim.LidarService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RatSim.LidarService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LidarService(object):
    """Services:
    """

    @staticmethod
    def GetLiDARData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.LidarService/GetLiDARData',
            RatSim__pb2.EmptyRequest.SerializeToString,
            RatSim__pb2.LidarData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLiDAROdom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.LidarService/GetLiDAROdom',
            RatSim__pb2.EmptyRequest.SerializeToString,
            RatSim__pb2.Odometry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLiDARDataAndOdom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.LidarService/GetLiDARDataAndOdom',
            RatSim__pb2.EmptyRequest.SerializeToString,
            RatSim__pb2.LidarDataAndOdom.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MeshServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMesh = channel.unary_unary(
                '/RatSim.MeshService/SendMesh',
                request_serializer=RatSim__pb2.MeshData.SerializeToString,
                response_deserializer=RatSim__pb2.Status.FromString,
                _registered_method=True)


class MeshServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMesh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeshServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMesh': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMesh,
                    request_deserializer=RatSim__pb2.MeshData.FromString,
                    response_serializer=RatSim__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RatSim.MeshService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RatSim.MeshService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MeshService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMesh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.MeshService/SendMesh',
            RatSim__pb2.MeshData.SerializeToString,
            RatSim__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PointCloudServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendPointCloudWithColor = channel.unary_unary(
                '/RatSim.PointCloudService/SendPointCloudWithColor',
                request_serializer=RatSim__pb2.PointCloudWithColor.SerializeToString,
                response_deserializer=RatSim__pb2.Status.FromString,
                _registered_method=True)


class PointCloudServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendPointCloudWithColor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PointCloudServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendPointCloudWithColor': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPointCloudWithColor,
                    request_deserializer=RatSim__pb2.PointCloudWithColor.FromString,
                    response_serializer=RatSim__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RatSim.PointCloudService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RatSim.PointCloudService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PointCloudService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendPointCloudWithColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.PointCloudService/SendPointCloudWithColor',
            RatSim__pb2.PointCloudWithColor.SerializeToString,
            RatSim__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DepthCameraServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDepthCameraPointData = channel.unary_unary(
                '/RatSim.DepthCameraService/GetDepthCameraPointData',
                request_serializer=RatSim__pb2.EmptyRequest.SerializeToString,
                response_deserializer=RatSim__pb2.DepthCameraPointData.FromString,
                _registered_method=True)
        self.GetDepthCameraImageData = channel.unary_unary(
                '/RatSim.DepthCameraService/GetDepthCameraImageData',
                request_serializer=RatSim__pb2.EmptyRequest.SerializeToString,
                response_deserializer=RatSim__pb2.DepthCameraImageData.FromString,
                _registered_method=True)
        self.GetDepthCameraOdom = channel.unary_unary(
                '/RatSim.DepthCameraService/GetDepthCameraOdom',
                request_serializer=RatSim__pb2.EmptyRequest.SerializeToString,
                response_deserializer=RatSim__pb2.Odometry.FromString,
                _registered_method=True)


class DepthCameraServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDepthCameraPointData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDepthCameraImageData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDepthCameraOdom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DepthCameraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDepthCameraPointData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDepthCameraPointData,
                    request_deserializer=RatSim__pb2.EmptyRequest.FromString,
                    response_serializer=RatSim__pb2.DepthCameraPointData.SerializeToString,
            ),
            'GetDepthCameraImageData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDepthCameraImageData,
                    request_deserializer=RatSim__pb2.EmptyRequest.FromString,
                    response_serializer=RatSim__pb2.DepthCameraImageData.SerializeToString,
            ),
            'GetDepthCameraOdom': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDepthCameraOdom,
                    request_deserializer=RatSim__pb2.EmptyRequest.FromString,
                    response_serializer=RatSim__pb2.Odometry.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RatSim.DepthCameraService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RatSim.DepthCameraService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DepthCameraService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDepthCameraPointData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.DepthCameraService/GetDepthCameraPointData',
            RatSim__pb2.EmptyRequest.SerializeToString,
            RatSim__pb2.DepthCameraPointData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDepthCameraImageData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.DepthCameraService/GetDepthCameraImageData',
            RatSim__pb2.EmptyRequest.SerializeToString,
            RatSim__pb2.DepthCameraImageData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDepthCameraOdom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RatSim.DepthCameraService/GetDepthCameraOdom',
            RatSim__pb2.EmptyRequest.SerializeToString,
            RatSim__pb2.Odometry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
