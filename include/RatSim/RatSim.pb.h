// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: RatSim.proto
// Protobuf C++ Version: 5.29.1

#ifndef RatSim_2eproto_2epb_2eh
#define RatSim_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_RatSim_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_RatSim_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_RatSim_2eproto;
namespace RatSim {
class DepthCameraImageData;
struct DepthCameraImageDataDefaultTypeInternal;
extern DepthCameraImageDataDefaultTypeInternal _DepthCameraImageData_default_instance_;
class DepthCameraPointData;
struct DepthCameraPointDataDefaultTypeInternal;
extern DepthCameraPointDataDefaultTypeInternal _DepthCameraPointData_default_instance_;
class DronePose;
struct DronePoseDefaultTypeInternal;
extern DronePoseDefaultTypeInternal _DronePose_default_instance_;
class EmptyRequest;
struct EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class LidarData;
struct LidarDataDefaultTypeInternal;
extern LidarDataDefaultTypeInternal _LidarData_default_instance_;
class LidarDataAndOdom;
struct LidarDataAndOdomDefaultTypeInternal;
extern LidarDataAndOdomDefaultTypeInternal _LidarDataAndOdom_default_instance_;
class LidarPoint;
struct LidarPointDefaultTypeInternal;
extern LidarPointDefaultTypeInternal _LidarPoint_default_instance_;
class MeshData;
struct MeshDataDefaultTypeInternal;
extern MeshDataDefaultTypeInternal _MeshData_default_instance_;
class MeshDataWithOdom;
struct MeshDataWithOdomDefaultTypeInternal;
extern MeshDataWithOdomDefaultTypeInternal _MeshDataWithOdom_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class PointCloudWithColor;
struct PointCloudWithColorDefaultTypeInternal;
extern PointCloudWithColorDefaultTypeInternal _PointCloudWithColor_default_instance_;
class PointWithColor;
struct PointWithColorDefaultTypeInternal;
extern PointWithColorDefaultTypeInternal _PointWithColor_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class RobotName;
struct RobotNameDefaultTypeInternal;
extern RobotNameDefaultTypeInternal _RobotName_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class twist;
struct twistDefaultTypeInternal;
extern twistDefaultTypeInternal _twist_default_instance_;
}  // namespace RatSim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace RatSim {

// ===================================================================


// -------------------------------------------------------------------

class twist final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.twist) */ {
 public:
  inline twist() : twist(nullptr) {}
  ~twist() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(twist* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(twist));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR twist(
      ::google::protobuf::internal::ConstantInitialized);

  inline twist(const twist& from) : twist(nullptr, from) {}
  inline twist(twist&& from) noexcept
      : twist(nullptr, std::move(from)) {}
  inline twist& operator=(const twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline twist& operator=(twist&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const twist& default_instance() {
    return *internal_default_instance();
  }
  static inline const twist* internal_default_instance() {
    return reinterpret_cast<const twist*>(
        &_twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(twist& a, twist& b) { a.Swap(&b); }
  inline void Swap(twist* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(twist* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  twist* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<twist>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const twist& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const twist& from) { twist::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(twist* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.twist"; }

 protected:
  explicit twist(::google::protobuf::Arena* arena);
  twist(::google::protobuf::Arena* arena, const twist& from);
  twist(::google::protobuf::Arena* arena, twist&& from) noexcept
      : twist(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLinearXFieldNumber = 1,
    kLinearYFieldNumber = 2,
    kLinearZFieldNumber = 3,
    kAngularXFieldNumber = 4,
    kAngularYFieldNumber = 5,
    kAngularZFieldNumber = 6,
  };
  // float linear_x = 1;
  void clear_linear_x() ;
  float linear_x() const;
  void set_linear_x(float value);

  private:
  float _internal_linear_x() const;
  void _internal_set_linear_x(float value);

  public:
  // float linear_y = 2;
  void clear_linear_y() ;
  float linear_y() const;
  void set_linear_y(float value);

  private:
  float _internal_linear_y() const;
  void _internal_set_linear_y(float value);

  public:
  // float linear_z = 3;
  void clear_linear_z() ;
  float linear_z() const;
  void set_linear_z(float value);

  private:
  float _internal_linear_z() const;
  void _internal_set_linear_z(float value);

  public:
  // float angular_x = 4;
  void clear_angular_x() ;
  float angular_x() const;
  void set_angular_x(float value);

  private:
  float _internal_angular_x() const;
  void _internal_set_angular_x(float value);

  public:
  // float angular_y = 5;
  void clear_angular_y() ;
  float angular_y() const;
  void set_angular_y(float value);

  private:
  float _internal_angular_y() const;
  void _internal_set_angular_y(float value);

  public:
  // float angular_z = 6;
  void clear_angular_z() ;
  float angular_z() const;
  void set_angular_z(float value);

  private:
  float _internal_angular_z() const;
  void _internal_set_angular_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.twist)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const twist& from_msg);
    float linear_x_;
    float linear_y_;
    float linear_z_;
    float angular_x_;
    float angular_y_;
    float angular_z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class Status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Status(
      ::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from) : Status(nullptr, from) {}
  inline Status(Status&& from) noexcept
      : Status(nullptr, std::move(from)) {}
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
        &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Status& a, Status& b) { a.Swap(&b); }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Status& from) { Status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.Status"; }

 protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  Status(::google::protobuf::Arena* arena, Status&& from) noexcept
      : Status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status() ;
  bool status() const;
  void set_status(bool value);

  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.Status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Status& from_msg);
    bool status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class RobotName final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.RobotName) */ {
 public:
  inline RobotName() : RobotName(nullptr) {}
  ~RobotName() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RobotName* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RobotName));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RobotName(
      ::google::protobuf::internal::ConstantInitialized);

  inline RobotName(const RobotName& from) : RobotName(nullptr, from) {}
  inline RobotName(RobotName&& from) noexcept
      : RobotName(nullptr, std::move(from)) {}
  inline RobotName& operator=(const RobotName& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotName& operator=(RobotName&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotName& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotName* internal_default_instance() {
    return reinterpret_cast<const RobotName*>(
        &_RobotName_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(RobotName& a, RobotName& b) { a.Swap(&b); }
  inline void Swap(RobotName* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotName* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RobotName>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RobotName& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RobotName& from) { RobotName::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RobotName* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.RobotName"; }

 protected:
  explicit RobotName(::google::protobuf::Arena* arena);
  RobotName(::google::protobuf::Arena* arena, const RobotName& from);
  RobotName(::google::protobuf::Arena* arena, RobotName&& from) noexcept
      : RobotName(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:RatSim.RobotName)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RobotName& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class Pose final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Pose* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Pose));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Pose(
      ::google::protobuf::internal::ConstantInitialized);

  inline Pose(const Pose& from) : Pose(nullptr, from) {}
  inline Pose(Pose&& from) noexcept
      : Pose(nullptr, std::move(from)) {}
  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
        &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Pose& a, Pose& b) { a.Swap(&b); }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Pose>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Pose& from) { Pose::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Pose* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.Pose"; }

 protected:
  explicit Pose(::google::protobuf::Arena* arena);
  Pose(::google::protobuf::Arena* arena, const Pose& from);
  Pose(::google::protobuf::Arena* arena, Pose&& from) noexcept
      : Pose(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRollFieldNumber = 4,
    kPitchFieldNumber = 5,
    kYawFieldNumber = 6,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float roll = 4;
  void clear_roll() ;
  float roll() const;
  void set_roll(float value);

  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);

  public:
  // float pitch = 5;
  void clear_pitch() ;
  float pitch() const;
  void set_pitch(float value);

  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);

  public:
  // float yaw = 6;
  void clear_yaw() ;
  float yaw() const;
  void set_yaw(float value);

  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.Pose)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Pose& from_msg);
    float x_;
    float y_;
    float z_;
    float roll_;
    float pitch_;
    float yaw_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class Point final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Point* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Point));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Point(
      ::google::protobuf::internal::ConstantInitialized);

  inline Point(const Point& from) : Point(nullptr, from) {}
  inline Point(Point&& from) noexcept
      : Point(nullptr, std::move(from)) {}
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
        &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Point& a, Point& b) { a.Swap(&b); }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Point& from) { Point::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Point* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.Point"; }

 protected:
  explicit Point(::google::protobuf::Arena* arena);
  Point(::google::protobuf::Arena* arena, const Point& from);
  Point(::google::protobuf::Arena* arena, Point&& from) noexcept
      : Point(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.Point)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Point& from_msg);
    float x_;
    float y_;
    float z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class LidarPoint final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.LidarPoint) */ {
 public:
  inline LidarPoint() : LidarPoint(nullptr) {}
  ~LidarPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LidarPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LidarPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LidarPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline LidarPoint(const LidarPoint& from) : LidarPoint(nullptr, from) {}
  inline LidarPoint(LidarPoint&& from) noexcept
      : LidarPoint(nullptr, std::move(from)) {}
  inline LidarPoint& operator=(const LidarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarPoint& operator=(LidarPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarPoint* internal_default_instance() {
    return reinterpret_cast<const LidarPoint*>(
        &_LidarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(LidarPoint& a, LidarPoint& b) { a.Swap(&b); }
  inline void Swap(LidarPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LidarPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LidarPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LidarPoint& from) { LidarPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LidarPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.LidarPoint"; }

 protected:
  explicit LidarPoint(::google::protobuf::Arena* arena);
  LidarPoint(::google::protobuf::Arena* arena, const LidarPoint& from);
  LidarPoint(::google::protobuf::Arena* arena, LidarPoint&& from) noexcept
      : LidarPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kHitFieldNumber = 4,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // int32 hit = 4;
  void clear_hit() ;
  ::int32_t hit() const;
  void set_hit(::int32_t value);

  private:
  ::int32_t _internal_hit() const;
  void _internal_set_hit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.LidarPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LidarPoint& from_msg);
    float x_;
    float y_;
    float z_;
    ::int32_t hit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class EmptyRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:RatSim.EmptyRequest) */ {
 public:
  inline EmptyRequest() : EmptyRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EmptyRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EmptyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmptyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmptyRequest(const EmptyRequest& from) : EmptyRequest(nullptr, from) {}
  inline EmptyRequest(EmptyRequest&& from) noexcept
      : EmptyRequest(nullptr, std::move(from)) {}
  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
        &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(EmptyRequest& a, EmptyRequest& b) { a.Swap(&b); }
  inline void Swap(EmptyRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<EmptyRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EmptyRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EmptyRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.EmptyRequest"; }

 protected:
  explicit EmptyRequest(::google::protobuf::Arena* arena);
  EmptyRequest(::google::protobuf::Arena* arena, const EmptyRequest& from);
  EmptyRequest(::google::protobuf::Arena* arena, EmptyRequest&& from) noexcept
      : EmptyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:RatSim.EmptyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmptyRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class DepthCameraImageData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.DepthCameraImageData) */ {
 public:
  inline DepthCameraImageData() : DepthCameraImageData(nullptr) {}
  ~DepthCameraImageData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DepthCameraImageData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DepthCameraImageData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DepthCameraImageData(
      ::google::protobuf::internal::ConstantInitialized);

  inline DepthCameraImageData(const DepthCameraImageData& from) : DepthCameraImageData(nullptr, from) {}
  inline DepthCameraImageData(DepthCameraImageData&& from) noexcept
      : DepthCameraImageData(nullptr, std::move(from)) {}
  inline DepthCameraImageData& operator=(const DepthCameraImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthCameraImageData& operator=(DepthCameraImageData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepthCameraImageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepthCameraImageData* internal_default_instance() {
    return reinterpret_cast<const DepthCameraImageData*>(
        &_DepthCameraImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(DepthCameraImageData& a, DepthCameraImageData& b) { a.Swap(&b); }
  inline void Swap(DepthCameraImageData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthCameraImageData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepthCameraImageData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DepthCameraImageData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DepthCameraImageData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DepthCameraImageData& from) { DepthCameraImageData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DepthCameraImageData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.DepthCameraImageData"; }

 protected:
  explicit DepthCameraImageData(::google::protobuf::Arena* arena);
  DepthCameraImageData(::google::protobuf::Arena* arena, const DepthCameraImageData& from);
  DepthCameraImageData(::google::protobuf::Arena* arena, DepthCameraImageData&& from) noexcept
      : DepthCameraImageData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField<float>& data() const;
  ::google::protobuf::RepeatedField<float>* mutable_data();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_data() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:RatSim.DepthCameraImageData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DepthCameraImageData& from_msg);
    ::google::protobuf::RepeatedField<float> data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class PointWithColor final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.PointWithColor) */ {
 public:
  inline PointWithColor() : PointWithColor(nullptr) {}
  ~PointWithColor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PointWithColor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PointWithColor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PointWithColor(
      ::google::protobuf::internal::ConstantInitialized);

  inline PointWithColor(const PointWithColor& from) : PointWithColor(nullptr, from) {}
  inline PointWithColor(PointWithColor&& from) noexcept
      : PointWithColor(nullptr, std::move(from)) {}
  inline PointWithColor& operator=(const PointWithColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointWithColor& operator=(PointWithColor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointWithColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointWithColor* internal_default_instance() {
    return reinterpret_cast<const PointWithColor*>(
        &_PointWithColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PointWithColor& a, PointWithColor& b) { a.Swap(&b); }
  inline void Swap(PointWithColor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointWithColor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointWithColor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PointWithColor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PointWithColor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PointWithColor& from) { PointWithColor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PointWithColor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.PointWithColor"; }

 protected:
  explicit PointWithColor(::google::protobuf::Arena* arena);
  PointWithColor(::google::protobuf::Arena* arena, const PointWithColor& from);
  PointWithColor(::google::protobuf::Arena* arena, PointWithColor&& from) noexcept
      : PointWithColor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPointFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // .RatSim.Point point = 1;
  bool has_point() const;
  void clear_point() ;
  const ::RatSim::Point& point() const;
  PROTOBUF_NODISCARD ::RatSim::Point* release_point();
  ::RatSim::Point* mutable_point();
  void set_allocated_point(::RatSim::Point* value);
  void unsafe_arena_set_allocated_point(::RatSim::Point* value);
  ::RatSim::Point* unsafe_arena_release_point();

  private:
  const ::RatSim::Point& _internal_point() const;
  ::RatSim::Point* _internal_mutable_point();

  public:
  // uint32 color = 2;
  void clear_color() ;
  ::uint32_t color() const;
  void set_color(::uint32_t value);

  private:
  ::uint32_t _internal_color() const;
  void _internal_set_color(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.PointWithColor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PointWithColor& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::RatSim::Point* point_;
    ::uint32_t color_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class Odometry final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Odometry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Odometry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Odometry(
      ::google::protobuf::internal::ConstantInitialized);

  inline Odometry(const Odometry& from) : Odometry(nullptr, from) {}
  inline Odometry(Odometry&& from) noexcept
      : Odometry(nullptr, std::move(from)) {}
  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
        &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Odometry& a, Odometry& b) { a.Swap(&b); }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Odometry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Odometry& from) { Odometry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Odometry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.Odometry"; }

 protected:
  explicit Odometry(::google::protobuf::Arena* arena);
  Odometry(::google::protobuf::Arena* arena, const Odometry& from);
  Odometry(::google::protobuf::Arena* arena, Odometry&& from) noexcept
      : Odometry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPoseFieldNumber = 1,
    kTwistFieldNumber = 2,
  };
  // .RatSim.Pose pose = 1;
  bool has_pose() const;
  void clear_pose() ;
  const ::RatSim::Pose& pose() const;
  PROTOBUF_NODISCARD ::RatSim::Pose* release_pose();
  ::RatSim::Pose* mutable_pose();
  void set_allocated_pose(::RatSim::Pose* value);
  void unsafe_arena_set_allocated_pose(::RatSim::Pose* value);
  ::RatSim::Pose* unsafe_arena_release_pose();

  private:
  const ::RatSim::Pose& _internal_pose() const;
  ::RatSim::Pose* _internal_mutable_pose();

  public:
  // .RatSim.twist twist = 2;
  bool has_twist() const;
  void clear_twist() ;
  const ::RatSim::twist& twist() const;
  PROTOBUF_NODISCARD ::RatSim::twist* release_twist();
  ::RatSim::twist* mutable_twist();
  void set_allocated_twist(::RatSim::twist* value);
  void unsafe_arena_set_allocated_twist(::RatSim::twist* value);
  ::RatSim::twist* unsafe_arena_release_twist();

  private:
  const ::RatSim::twist& _internal_twist() const;
  ::RatSim::twist* _internal_mutable_twist();

  public:
  // @@protoc_insertion_point(class_scope:RatSim.Odometry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Odometry& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::RatSim::Pose* pose_;
    ::RatSim::twist* twist_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class MeshData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.MeshData) */ {
 public:
  inline MeshData() : MeshData(nullptr) {}
  ~MeshData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MeshData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MeshData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MeshData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MeshData(const MeshData& from) : MeshData(nullptr, from) {}
  inline MeshData(MeshData&& from) noexcept
      : MeshData(nullptr, std::move(from)) {}
  inline MeshData& operator=(const MeshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshData& operator=(MeshData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshData* internal_default_instance() {
    return reinterpret_cast<const MeshData*>(
        &_MeshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(MeshData& a, MeshData& b) { a.Swap(&b); }
  inline void Swap(MeshData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MeshData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MeshData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MeshData& from) { MeshData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MeshData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.MeshData"; }

 protected:
  explicit MeshData(::google::protobuf::Arena* arena);
  MeshData(::google::protobuf::Arena* arena, const MeshData& from);
  MeshData(::google::protobuf::Arena* arena, MeshData&& from) noexcept
      : MeshData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kTransformFieldNumber = 5,
    kFormatFieldNumber = 2,
    kVersionFieldNumber = 3,
    kSimplifiedFieldNumber = 4,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .RatSim.Pose transform = 5;
  bool has_transform() const;
  void clear_transform() ;
  const ::RatSim::Pose& transform() const;
  PROTOBUF_NODISCARD ::RatSim::Pose* release_transform();
  ::RatSim::Pose* mutable_transform();
  void set_allocated_transform(::RatSim::Pose* value);
  void unsafe_arena_set_allocated_transform(::RatSim::Pose* value);
  ::RatSim::Pose* unsafe_arena_release_transform();

  private:
  const ::RatSim::Pose& _internal_transform() const;
  ::RatSim::Pose* _internal_mutable_transform();

  public:
  // uint32 format = 2;
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // uint32 version = 3;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // bool simplified = 4;
  void clear_simplified() ;
  bool simplified() const;
  void set_simplified(bool value);

  private:
  bool _internal_simplified() const;
  void _internal_set_simplified(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RatSim.MeshData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MeshData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::RatSim::Pose* transform_;
    ::uint32_t format_;
    ::uint32_t version_;
    bool simplified_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class LidarData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.LidarData) */ {
 public:
  inline LidarData() : LidarData(nullptr) {}
  ~LidarData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LidarData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LidarData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LidarData(
      ::google::protobuf::internal::ConstantInitialized);

  inline LidarData(const LidarData& from) : LidarData(nullptr, from) {}
  inline LidarData(LidarData&& from) noexcept
      : LidarData(nullptr, std::move(from)) {}
  inline LidarData& operator=(const LidarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarData& operator=(LidarData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarData* internal_default_instance() {
    return reinterpret_cast<const LidarData*>(
        &_LidarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(LidarData& a, LidarData& b) { a.Swap(&b); }
  inline void Swap(LidarData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LidarData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LidarData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LidarData& from) { LidarData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LidarData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.LidarData"; }

 protected:
  explicit LidarData(::google::protobuf::Arena* arena);
  LidarData(::google::protobuf::Arena* arena, const LidarData& from);
  LidarData(::google::protobuf::Arena* arena, LidarData&& from) noexcept
      : LidarData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .RatSim.LidarPoint data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::RatSim::LidarPoint* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>* _internal_mutable_data();
  public:
  const ::RatSim::LidarPoint& data(int index) const;
  ::RatSim::LidarPoint* add_data();
  const ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>& data() const;
  // @@protoc_insertion_point(class_scope:RatSim.LidarData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LidarData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::RatSim::LidarPoint > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class DronePose final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.DronePose) */ {
 public:
  inline DronePose() : DronePose(nullptr) {}
  ~DronePose() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DronePose* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DronePose));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DronePose(
      ::google::protobuf::internal::ConstantInitialized);

  inline DronePose(const DronePose& from) : DronePose(nullptr, from) {}
  inline DronePose(DronePose&& from) noexcept
      : DronePose(nullptr, std::move(from)) {}
  inline DronePose& operator=(const DronePose& from) {
    CopyFrom(from);
    return *this;
  }
  inline DronePose& operator=(DronePose&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DronePose& default_instance() {
    return *internal_default_instance();
  }
  static inline const DronePose* internal_default_instance() {
    return reinterpret_cast<const DronePose*>(
        &_DronePose_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(DronePose& a, DronePose& b) { a.Swap(&b); }
  inline void Swap(DronePose* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DronePose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DronePose* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DronePose>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DronePose& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DronePose& from) { DronePose::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DronePose* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.DronePose"; }

 protected:
  explicit DronePose(::google::protobuf::Arena* arena);
  DronePose(::google::protobuf::Arena* arena, const DronePose& from);
  DronePose(::google::protobuf::Arena* arena, DronePose&& from) noexcept
      : DronePose(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .RatSim.Pose pose = 2;
  bool has_pose() const;
  void clear_pose() ;
  const ::RatSim::Pose& pose() const;
  PROTOBUF_NODISCARD ::RatSim::Pose* release_pose();
  ::RatSim::Pose* mutable_pose();
  void set_allocated_pose(::RatSim::Pose* value);
  void unsafe_arena_set_allocated_pose(::RatSim::Pose* value);
  ::RatSim::Pose* unsafe_arena_release_pose();

  private:
  const ::RatSim::Pose& _internal_pose() const;
  ::RatSim::Pose* _internal_mutable_pose();

  public:
  // @@protoc_insertion_point(class_scope:RatSim.DronePose)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DronePose& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::RatSim::Pose* pose_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class DepthCameraPointData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.DepthCameraPointData) */ {
 public:
  inline DepthCameraPointData() : DepthCameraPointData(nullptr) {}
  ~DepthCameraPointData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DepthCameraPointData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DepthCameraPointData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DepthCameraPointData(
      ::google::protobuf::internal::ConstantInitialized);

  inline DepthCameraPointData(const DepthCameraPointData& from) : DepthCameraPointData(nullptr, from) {}
  inline DepthCameraPointData(DepthCameraPointData&& from) noexcept
      : DepthCameraPointData(nullptr, std::move(from)) {}
  inline DepthCameraPointData& operator=(const DepthCameraPointData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthCameraPointData& operator=(DepthCameraPointData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepthCameraPointData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepthCameraPointData* internal_default_instance() {
    return reinterpret_cast<const DepthCameraPointData*>(
        &_DepthCameraPointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(DepthCameraPointData& a, DepthCameraPointData& b) { a.Swap(&b); }
  inline void Swap(DepthCameraPointData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthCameraPointData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepthCameraPointData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DepthCameraPointData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DepthCameraPointData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DepthCameraPointData& from) { DepthCameraPointData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DepthCameraPointData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.DepthCameraPointData"; }

 protected:
  explicit DepthCameraPointData(::google::protobuf::Arena* arena);
  DepthCameraPointData(::google::protobuf::Arena* arena, const DepthCameraPointData& from);
  DepthCameraPointData(::google::protobuf::Arena* arena, DepthCameraPointData&& from) noexcept
      : DepthCameraPointData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .RatSim.Point data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::RatSim::Point* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::RatSim::Point>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::RatSim::Point>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::RatSim::Point>* _internal_mutable_data();
  public:
  const ::RatSim::Point& data(int index) const;
  ::RatSim::Point* add_data();
  const ::google::protobuf::RepeatedPtrField<::RatSim::Point>& data() const;
  // @@protoc_insertion_point(class_scope:RatSim.DepthCameraPointData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DepthCameraPointData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::RatSim::Point > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class PointCloudWithColor final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.PointCloudWithColor) */ {
 public:
  inline PointCloudWithColor() : PointCloudWithColor(nullptr) {}
  ~PointCloudWithColor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PointCloudWithColor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PointCloudWithColor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PointCloudWithColor(
      ::google::protobuf::internal::ConstantInitialized);

  inline PointCloudWithColor(const PointCloudWithColor& from) : PointCloudWithColor(nullptr, from) {}
  inline PointCloudWithColor(PointCloudWithColor&& from) noexcept
      : PointCloudWithColor(nullptr, std::move(from)) {}
  inline PointCloudWithColor& operator=(const PointCloudWithColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudWithColor& operator=(PointCloudWithColor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloudWithColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloudWithColor* internal_default_instance() {
    return reinterpret_cast<const PointCloudWithColor*>(
        &_PointCloudWithColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PointCloudWithColor& a, PointCloudWithColor& b) { a.Swap(&b); }
  inline void Swap(PointCloudWithColor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloudWithColor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloudWithColor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PointCloudWithColor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PointCloudWithColor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PointCloudWithColor& from) { PointCloudWithColor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PointCloudWithColor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.PointCloudWithColor"; }

 protected:
  explicit PointCloudWithColor(::google::protobuf::Arena* arena);
  PointCloudWithColor(::google::protobuf::Arena* arena, const PointCloudWithColor& from);
  PointCloudWithColor(::google::protobuf::Arena* arena, PointCloudWithColor&& from) noexcept
      : PointCloudWithColor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .RatSim.PointWithColor data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::RatSim::PointWithColor* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>* _internal_mutable_data();
  public:
  const ::RatSim::PointWithColor& data(int index) const;
  ::RatSim::PointWithColor* add_data();
  const ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>& data() const;
  // @@protoc_insertion_point(class_scope:RatSim.PointCloudWithColor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PointCloudWithColor& from_msg);
    ::google::protobuf::RepeatedPtrField< ::RatSim::PointWithColor > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class MeshDataWithOdom final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.MeshDataWithOdom) */ {
 public:
  inline MeshDataWithOdom() : MeshDataWithOdom(nullptr) {}
  ~MeshDataWithOdom() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MeshDataWithOdom* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MeshDataWithOdom));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MeshDataWithOdom(
      ::google::protobuf::internal::ConstantInitialized);

  inline MeshDataWithOdom(const MeshDataWithOdom& from) : MeshDataWithOdom(nullptr, from) {}
  inline MeshDataWithOdom(MeshDataWithOdom&& from) noexcept
      : MeshDataWithOdom(nullptr, std::move(from)) {}
  inline MeshDataWithOdom& operator=(const MeshDataWithOdom& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshDataWithOdom& operator=(MeshDataWithOdom&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeshDataWithOdom& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeshDataWithOdom* internal_default_instance() {
    return reinterpret_cast<const MeshDataWithOdom*>(
        &_MeshDataWithOdom_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(MeshDataWithOdom& a, MeshDataWithOdom& b) { a.Swap(&b); }
  inline void Swap(MeshDataWithOdom* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshDataWithOdom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeshDataWithOdom* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MeshDataWithOdom>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MeshDataWithOdom& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MeshDataWithOdom& from) { MeshDataWithOdom::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MeshDataWithOdom* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.MeshDataWithOdom"; }

 protected:
  explicit MeshDataWithOdom(::google::protobuf::Arena* arena);
  MeshDataWithOdom(::google::protobuf::Arena* arena, const MeshDataWithOdom& from);
  MeshDataWithOdom(::google::protobuf::Arena* arena, MeshDataWithOdom&& from) noexcept
      : MeshDataWithOdom(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMeshFieldNumber = 1,
    kOdomFieldNumber = 2,
  };
  // .RatSim.MeshData mesh = 1;
  bool has_mesh() const;
  void clear_mesh() ;
  const ::RatSim::MeshData& mesh() const;
  PROTOBUF_NODISCARD ::RatSim::MeshData* release_mesh();
  ::RatSim::MeshData* mutable_mesh();
  void set_allocated_mesh(::RatSim::MeshData* value);
  void unsafe_arena_set_allocated_mesh(::RatSim::MeshData* value);
  ::RatSim::MeshData* unsafe_arena_release_mesh();

  private:
  const ::RatSim::MeshData& _internal_mesh() const;
  ::RatSim::MeshData* _internal_mutable_mesh();

  public:
  // .RatSim.Odometry odom = 2;
  bool has_odom() const;
  void clear_odom() ;
  const ::RatSim::Odometry& odom() const;
  PROTOBUF_NODISCARD ::RatSim::Odometry* release_odom();
  ::RatSim::Odometry* mutable_odom();
  void set_allocated_odom(::RatSim::Odometry* value);
  void unsafe_arena_set_allocated_odom(::RatSim::Odometry* value);
  ::RatSim::Odometry* unsafe_arena_release_odom();

  private:
  const ::RatSim::Odometry& _internal_odom() const;
  ::RatSim::Odometry* _internal_mutable_odom();

  public:
  // @@protoc_insertion_point(class_scope:RatSim.MeshDataWithOdom)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MeshDataWithOdom& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::RatSim::MeshData* mesh_;
    ::RatSim::Odometry* odom_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};
// -------------------------------------------------------------------

class LidarDataAndOdom final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RatSim.LidarDataAndOdom) */ {
 public:
  inline LidarDataAndOdom() : LidarDataAndOdom(nullptr) {}
  ~LidarDataAndOdom() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LidarDataAndOdom* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LidarDataAndOdom));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LidarDataAndOdom(
      ::google::protobuf::internal::ConstantInitialized);

  inline LidarDataAndOdom(const LidarDataAndOdom& from) : LidarDataAndOdom(nullptr, from) {}
  inline LidarDataAndOdom(LidarDataAndOdom&& from) noexcept
      : LidarDataAndOdom(nullptr, std::move(from)) {}
  inline LidarDataAndOdom& operator=(const LidarDataAndOdom& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarDataAndOdom& operator=(LidarDataAndOdom&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LidarDataAndOdom& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarDataAndOdom* internal_default_instance() {
    return reinterpret_cast<const LidarDataAndOdom*>(
        &_LidarDataAndOdom_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(LidarDataAndOdom& a, LidarDataAndOdom& b) { a.Swap(&b); }
  inline void Swap(LidarDataAndOdom* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarDataAndOdom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LidarDataAndOdom* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LidarDataAndOdom>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LidarDataAndOdom& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LidarDataAndOdom& from) { LidarDataAndOdom::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LidarDataAndOdom* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "RatSim.LidarDataAndOdom"; }

 protected:
  explicit LidarDataAndOdom(::google::protobuf::Arena* arena);
  LidarDataAndOdom(::google::protobuf::Arena* arena, const LidarDataAndOdom& from);
  LidarDataAndOdom(::google::protobuf::Arena* arena, LidarDataAndOdom&& from) noexcept
      : LidarDataAndOdom(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kOdomFieldNumber = 2,
  };
  // .RatSim.LidarData data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::RatSim::LidarData& data() const;
  PROTOBUF_NODISCARD ::RatSim::LidarData* release_data();
  ::RatSim::LidarData* mutable_data();
  void set_allocated_data(::RatSim::LidarData* value);
  void unsafe_arena_set_allocated_data(::RatSim::LidarData* value);
  ::RatSim::LidarData* unsafe_arena_release_data();

  private:
  const ::RatSim::LidarData& _internal_data() const;
  ::RatSim::LidarData* _internal_mutable_data();

  public:
  // .RatSim.Odometry odom = 2;
  bool has_odom() const;
  void clear_odom() ;
  const ::RatSim::Odometry& odom() const;
  PROTOBUF_NODISCARD ::RatSim::Odometry* release_odom();
  ::RatSim::Odometry* mutable_odom();
  void set_allocated_odom(::RatSim::Odometry* value);
  void unsafe_arena_set_allocated_odom(::RatSim::Odometry* value);
  ::RatSim::Odometry* unsafe_arena_release_odom();

  private:
  const ::RatSim::Odometry& _internal_odom() const;
  ::RatSim::Odometry* _internal_mutable_odom();

  public:
  // @@protoc_insertion_point(class_scope:RatSim.LidarDataAndOdom)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LidarDataAndOdom& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::RatSim::LidarData* data_;
    ::RatSim::Odometry* odom_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RatSim_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:RatSim.Point.x)
  return _internal_x();
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RatSim.Point.x)
}
inline float Point::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Point::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Point::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:RatSim.Point.y)
  return _internal_y();
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RatSim.Point.y)
}
inline float Point::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Point::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Point::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:RatSim.Point.z)
  return _internal_z();
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RatSim.Point.z)
}
inline float Point::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Point::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// PointWithColor

// .RatSim.Point point = 1;
inline bool PointWithColor::has_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.point_ != nullptr);
  return value;
}
inline void PointWithColor::clear_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.point_ != nullptr) _impl_.point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::RatSim::Point& PointWithColor::_internal_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::Point&>(::RatSim::_Point_default_instance_);
}
inline const ::RatSim::Point& PointWithColor::point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.PointWithColor.point)
  return _internal_point();
}
inline void PointWithColor::unsafe_arena_set_allocated_point(::RatSim::Point* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = reinterpret_cast<::RatSim::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.PointWithColor.point)
}
inline ::RatSim::Point* PointWithColor::release_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Point* released = _impl_.point_;
  _impl_.point_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::Point* PointWithColor::unsafe_arena_release_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.PointWithColor.point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::RatSim::Point* PointWithColor::_internal_mutable_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::Point>(GetArena());
    _impl_.point_ = reinterpret_cast<::RatSim::Point*>(p);
  }
  return _impl_.point_;
}
inline ::RatSim::Point* PointWithColor::mutable_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::RatSim::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:RatSim.PointWithColor.point)
  return _msg;
}
inline void PointWithColor::set_allocated_point(::RatSim::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.point_ = reinterpret_cast<::RatSim::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.PointWithColor.point)
}

// uint32 color = 2;
inline void PointWithColor::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = 0u;
}
inline ::uint32_t PointWithColor::color() const {
  // @@protoc_insertion_point(field_get:RatSim.PointWithColor.color)
  return _internal_color();
}
inline void PointWithColor::set_color(::uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:RatSim.PointWithColor.color)
}
inline ::uint32_t PointWithColor::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_;
}
inline void PointWithColor::_internal_set_color(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = value;
}

// -------------------------------------------------------------------

// PointCloudWithColor

// repeated .RatSim.PointWithColor data = 1;
inline int PointCloudWithColor::_internal_data_size() const {
  return _internal_data().size();
}
inline int PointCloudWithColor::data_size() const {
  return _internal_data_size();
}
inline void PointCloudWithColor::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::RatSim::PointWithColor* PointCloudWithColor::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:RatSim.PointCloudWithColor.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>* PointCloudWithColor::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RatSim.PointCloudWithColor.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::RatSim::PointWithColor& PointCloudWithColor::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.PointCloudWithColor.data)
  return _internal_data().Get(index);
}
inline ::RatSim::PointWithColor* PointCloudWithColor::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::RatSim::PointWithColor* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:RatSim.PointCloudWithColor.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>& PointCloudWithColor::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RatSim.PointCloudWithColor.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>&
PointCloudWithColor::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::RatSim::PointWithColor>*
PointCloudWithColor::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// EmptyRequest

// -------------------------------------------------------------------

// Pose

// float x = 1;
inline void Pose::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Pose::x() const {
  // @@protoc_insertion_point(field_get:RatSim.Pose.x)
  return _internal_x();
}
inline void Pose::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RatSim.Pose.x)
}
inline float Pose::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Pose::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Pose::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Pose::y() const {
  // @@protoc_insertion_point(field_get:RatSim.Pose.y)
  return _internal_y();
}
inline void Pose::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RatSim.Pose.y)
}
inline float Pose::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Pose::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Pose::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Pose::z() const {
  // @@protoc_insertion_point(field_get:RatSim.Pose.z)
  return _internal_z();
}
inline void Pose::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RatSim.Pose.z)
}
inline float Pose::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Pose::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// float roll = 4;
inline void Pose::clear_roll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = 0;
}
inline float Pose::roll() const {
  // @@protoc_insertion_point(field_get:RatSim.Pose.roll)
  return _internal_roll();
}
inline void Pose::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:RatSim.Pose.roll)
}
inline float Pose::_internal_roll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_;
}
inline void Pose::_internal_set_roll(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = value;
}

// float pitch = 5;
inline void Pose::clear_pitch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_ = 0;
}
inline float Pose::pitch() const {
  // @@protoc_insertion_point(field_get:RatSim.Pose.pitch)
  return _internal_pitch();
}
inline void Pose::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:RatSim.Pose.pitch)
}
inline float Pose::_internal_pitch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_;
}
inline void Pose::_internal_set_pitch(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_ = value;
}

// float yaw = 6;
inline void Pose::clear_yaw() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_ = 0;
}
inline float Pose::yaw() const {
  // @@protoc_insertion_point(field_get:RatSim.Pose.yaw)
  return _internal_yaw();
}
inline void Pose::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:RatSim.Pose.yaw)
}
inline float Pose::_internal_yaw() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_;
}
inline void Pose::_internal_set_yaw(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_ = value;
}

// -------------------------------------------------------------------

// twist

// float linear_x = 1;
inline void twist::clear_linear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_x_ = 0;
}
inline float twist::linear_x() const {
  // @@protoc_insertion_point(field_get:RatSim.twist.linear_x)
  return _internal_linear_x();
}
inline void twist::set_linear_x(float value) {
  _internal_set_linear_x(value);
  // @@protoc_insertion_point(field_set:RatSim.twist.linear_x)
}
inline float twist::_internal_linear_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_x_;
}
inline void twist::_internal_set_linear_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_x_ = value;
}

// float linear_y = 2;
inline void twist::clear_linear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_y_ = 0;
}
inline float twist::linear_y() const {
  // @@protoc_insertion_point(field_get:RatSim.twist.linear_y)
  return _internal_linear_y();
}
inline void twist::set_linear_y(float value) {
  _internal_set_linear_y(value);
  // @@protoc_insertion_point(field_set:RatSim.twist.linear_y)
}
inline float twist::_internal_linear_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_y_;
}
inline void twist::_internal_set_linear_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_y_ = value;
}

// float linear_z = 3;
inline void twist::clear_linear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_z_ = 0;
}
inline float twist::linear_z() const {
  // @@protoc_insertion_point(field_get:RatSim.twist.linear_z)
  return _internal_linear_z();
}
inline void twist::set_linear_z(float value) {
  _internal_set_linear_z(value);
  // @@protoc_insertion_point(field_set:RatSim.twist.linear_z)
}
inline float twist::_internal_linear_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_z_;
}
inline void twist::_internal_set_linear_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_z_ = value;
}

// float angular_x = 4;
inline void twist::clear_angular_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_x_ = 0;
}
inline float twist::angular_x() const {
  // @@protoc_insertion_point(field_get:RatSim.twist.angular_x)
  return _internal_angular_x();
}
inline void twist::set_angular_x(float value) {
  _internal_set_angular_x(value);
  // @@protoc_insertion_point(field_set:RatSim.twist.angular_x)
}
inline float twist::_internal_angular_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angular_x_;
}
inline void twist::_internal_set_angular_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_x_ = value;
}

// float angular_y = 5;
inline void twist::clear_angular_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_y_ = 0;
}
inline float twist::angular_y() const {
  // @@protoc_insertion_point(field_get:RatSim.twist.angular_y)
  return _internal_angular_y();
}
inline void twist::set_angular_y(float value) {
  _internal_set_angular_y(value);
  // @@protoc_insertion_point(field_set:RatSim.twist.angular_y)
}
inline float twist::_internal_angular_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angular_y_;
}
inline void twist::_internal_set_angular_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_y_ = value;
}

// float angular_z = 6;
inline void twist::clear_angular_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_z_ = 0;
}
inline float twist::angular_z() const {
  // @@protoc_insertion_point(field_get:RatSim.twist.angular_z)
  return _internal_angular_z();
}
inline void twist::set_angular_z(float value) {
  _internal_set_angular_z(value);
  // @@protoc_insertion_point(field_set:RatSim.twist.angular_z)
}
inline float twist::_internal_angular_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.angular_z_;
}
inline void twist::_internal_set_angular_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.angular_z_ = value;
}

// -------------------------------------------------------------------

// Odometry

// .RatSim.Pose pose = 1;
inline bool Odometry::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline void Odometry::clear_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::RatSim::Pose& Odometry::_internal_pose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::Pose&>(::RatSim::_Pose_default_instance_);
}
inline const ::RatSim::Pose& Odometry::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.Odometry.pose)
  return _internal_pose();
}
inline void Odometry::unsafe_arena_set_allocated_pose(::RatSim::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::RatSim::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.Odometry.pose)
}
inline ::RatSim::Pose* Odometry::release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::Pose* Odometry::unsafe_arena_release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.Odometry.pose)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::RatSim::Pose* Odometry::_internal_mutable_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::RatSim::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::RatSim::Pose* Odometry::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::RatSim::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:RatSim.Odometry.pose)
  return _msg;
}
inline void Odometry::set_allocated_pose(::RatSim::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pose_ = reinterpret_cast<::RatSim::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.Odometry.pose)
}

// .RatSim.twist twist = 2;
inline bool Odometry::has_twist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.twist_ != nullptr);
  return value;
}
inline void Odometry::clear_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.twist_ != nullptr) _impl_.twist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::RatSim::twist& Odometry::_internal_twist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::twist* p = _impl_.twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::twist&>(::RatSim::_twist_default_instance_);
}
inline const ::RatSim::twist& Odometry::twist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.Odometry.twist)
  return _internal_twist();
}
inline void Odometry::unsafe_arena_set_allocated_twist(::RatSim::twist* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.twist_);
  }
  _impl_.twist_ = reinterpret_cast<::RatSim::twist*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.Odometry.twist)
}
inline ::RatSim::twist* Odometry::release_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RatSim::twist* released = _impl_.twist_;
  _impl_.twist_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::twist* Odometry::unsafe_arena_release_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.Odometry.twist)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RatSim::twist* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
  return temp;
}
inline ::RatSim::twist* Odometry::_internal_mutable_twist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.twist_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::twist>(GetArena());
    _impl_.twist_ = reinterpret_cast<::RatSim::twist*>(p);
  }
  return _impl_.twist_;
}
inline ::RatSim::twist* Odometry::mutable_twist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::RatSim::twist* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:RatSim.Odometry.twist)
  return _msg;
}
inline void Odometry::set_allocated_twist(::RatSim::twist* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.twist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.twist_ = reinterpret_cast<::RatSim::twist*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.Odometry.twist)
}

// -------------------------------------------------------------------

// Status

// bool status = 1;
inline void Status::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = false;
}
inline bool Status::status() const {
  // @@protoc_insertion_point(field_get:RatSim.Status.status)
  return _internal_status();
}
inline void Status::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RatSim.Status.status)
}
inline bool Status::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_;
}
inline void Status::_internal_set_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// RobotName

// string name = 1;
inline void RobotName::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RobotName::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.RobotName.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RobotName::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RatSim.RobotName.name)
}
inline std::string* RobotName::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:RatSim.RobotName.name)
  return _s;
}
inline const std::string& RobotName::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RobotName::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RobotName::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RobotName::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.RobotName.name)
  return _impl_.name_.Release();
}
inline void RobotName::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:RatSim.RobotName.name)
}

// -------------------------------------------------------------------

// MeshData

// bytes data = 1;
inline void MeshData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MeshData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.MeshData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MeshData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RatSim.MeshData.data)
}
inline std::string* MeshData::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:RatSim.MeshData.data)
  return _s;
}
inline const std::string& MeshData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void MeshData::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* MeshData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* MeshData::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.MeshData.data)
  return _impl_.data_.Release();
}
inline void MeshData::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:RatSim.MeshData.data)
}

// uint32 format = 2;
inline void MeshData::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0u;
}
inline ::uint32_t MeshData::format() const {
  // @@protoc_insertion_point(field_get:RatSim.MeshData.format)
  return _internal_format();
}
inline void MeshData::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:RatSim.MeshData.format)
}
inline ::uint32_t MeshData::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void MeshData::_internal_set_format(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// uint32 version = 3;
inline void MeshData::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0u;
}
inline ::uint32_t MeshData::version() const {
  // @@protoc_insertion_point(field_get:RatSim.MeshData.version)
  return _internal_version();
}
inline void MeshData::set_version(::uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:RatSim.MeshData.version)
}
inline ::uint32_t MeshData::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void MeshData::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// bool simplified = 4;
inline void MeshData::clear_simplified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.simplified_ = false;
}
inline bool MeshData::simplified() const {
  // @@protoc_insertion_point(field_get:RatSim.MeshData.simplified)
  return _internal_simplified();
}
inline void MeshData::set_simplified(bool value) {
  _internal_set_simplified(value);
  // @@protoc_insertion_point(field_set:RatSim.MeshData.simplified)
}
inline bool MeshData::_internal_simplified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.simplified_;
}
inline void MeshData::_internal_set_simplified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.simplified_ = value;
}

// .RatSim.Pose transform = 5;
inline bool MeshData::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline void MeshData::clear_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::RatSim::Pose& MeshData::_internal_transform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::Pose* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::Pose&>(::RatSim::_Pose_default_instance_);
}
inline const ::RatSim::Pose& MeshData::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.MeshData.transform)
  return _internal_transform();
}
inline void MeshData::unsafe_arena_set_allocated_transform(::RatSim::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::RatSim::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.MeshData.transform)
}
inline ::RatSim::Pose* MeshData::release_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Pose* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::Pose* MeshData::unsafe_arena_release_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.MeshData.transform)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Pose* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::RatSim::Pose* MeshData::_internal_mutable_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transform_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::Pose>(GetArena());
    _impl_.transform_ = reinterpret_cast<::RatSim::Pose*>(p);
  }
  return _impl_.transform_;
}
inline ::RatSim::Pose* MeshData::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::RatSim::Pose* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:RatSim.MeshData.transform)
  return _msg;
}
inline void MeshData::set_allocated_transform(::RatSim::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.transform_ = reinterpret_cast<::RatSim::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.MeshData.transform)
}

// -------------------------------------------------------------------

// MeshDataWithOdom

// .RatSim.MeshData mesh = 1;
inline bool MeshDataWithOdom::has_mesh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mesh_ != nullptr);
  return value;
}
inline void MeshDataWithOdom::clear_mesh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mesh_ != nullptr) _impl_.mesh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::RatSim::MeshData& MeshDataWithOdom::_internal_mesh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::MeshData* p = _impl_.mesh_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::MeshData&>(::RatSim::_MeshData_default_instance_);
}
inline const ::RatSim::MeshData& MeshDataWithOdom::mesh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.MeshDataWithOdom.mesh)
  return _internal_mesh();
}
inline void MeshDataWithOdom::unsafe_arena_set_allocated_mesh(::RatSim::MeshData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mesh_);
  }
  _impl_.mesh_ = reinterpret_cast<::RatSim::MeshData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.MeshDataWithOdom.mesh)
}
inline ::RatSim::MeshData* MeshDataWithOdom::release_mesh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::MeshData* released = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::MeshData* MeshDataWithOdom::unsafe_arena_release_mesh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.MeshDataWithOdom.mesh)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::MeshData* temp = _impl_.mesh_;
  _impl_.mesh_ = nullptr;
  return temp;
}
inline ::RatSim::MeshData* MeshDataWithOdom::_internal_mutable_mesh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mesh_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::MeshData>(GetArena());
    _impl_.mesh_ = reinterpret_cast<::RatSim::MeshData*>(p);
  }
  return _impl_.mesh_;
}
inline ::RatSim::MeshData* MeshDataWithOdom::mutable_mesh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::RatSim::MeshData* _msg = _internal_mutable_mesh();
  // @@protoc_insertion_point(field_mutable:RatSim.MeshDataWithOdom.mesh)
  return _msg;
}
inline void MeshDataWithOdom::set_allocated_mesh(::RatSim::MeshData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.mesh_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mesh_ = reinterpret_cast<::RatSim::MeshData*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.MeshDataWithOdom.mesh)
}

// .RatSim.Odometry odom = 2;
inline bool MeshDataWithOdom::has_odom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.odom_ != nullptr);
  return value;
}
inline void MeshDataWithOdom::clear_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.odom_ != nullptr) _impl_.odom_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::RatSim::Odometry& MeshDataWithOdom::_internal_odom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::Odometry* p = _impl_.odom_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::Odometry&>(::RatSim::_Odometry_default_instance_);
}
inline const ::RatSim::Odometry& MeshDataWithOdom::odom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.MeshDataWithOdom.odom)
  return _internal_odom();
}
inline void MeshDataWithOdom::unsafe_arena_set_allocated_odom(::RatSim::Odometry* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.odom_);
  }
  _impl_.odom_ = reinterpret_cast<::RatSim::Odometry*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.MeshDataWithOdom.odom)
}
inline ::RatSim::Odometry* MeshDataWithOdom::release_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RatSim::Odometry* released = _impl_.odom_;
  _impl_.odom_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::Odometry* MeshDataWithOdom::unsafe_arena_release_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.MeshDataWithOdom.odom)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RatSim::Odometry* temp = _impl_.odom_;
  _impl_.odom_ = nullptr;
  return temp;
}
inline ::RatSim::Odometry* MeshDataWithOdom::_internal_mutable_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.odom_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::Odometry>(GetArena());
    _impl_.odom_ = reinterpret_cast<::RatSim::Odometry*>(p);
  }
  return _impl_.odom_;
}
inline ::RatSim::Odometry* MeshDataWithOdom::mutable_odom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::RatSim::Odometry* _msg = _internal_mutable_odom();
  // @@protoc_insertion_point(field_mutable:RatSim.MeshDataWithOdom.odom)
  return _msg;
}
inline void MeshDataWithOdom::set_allocated_odom(::RatSim::Odometry* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.odom_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.odom_ = reinterpret_cast<::RatSim::Odometry*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.MeshDataWithOdom.odom)
}

// -------------------------------------------------------------------

// LidarPoint

// float x = 1;
inline void LidarPoint::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float LidarPoint::x() const {
  // @@protoc_insertion_point(field_get:RatSim.LidarPoint.x)
  return _internal_x();
}
inline void LidarPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RatSim.LidarPoint.x)
}
inline float LidarPoint::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void LidarPoint::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void LidarPoint::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float LidarPoint::y() const {
  // @@protoc_insertion_point(field_get:RatSim.LidarPoint.y)
  return _internal_y();
}
inline void LidarPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RatSim.LidarPoint.y)
}
inline float LidarPoint::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void LidarPoint::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void LidarPoint::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float LidarPoint::z() const {
  // @@protoc_insertion_point(field_get:RatSim.LidarPoint.z)
  return _internal_z();
}
inline void LidarPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RatSim.LidarPoint.z)
}
inline float LidarPoint::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void LidarPoint::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// int32 hit = 4;
inline void LidarPoint::clear_hit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hit_ = 0;
}
inline ::int32_t LidarPoint::hit() const {
  // @@protoc_insertion_point(field_get:RatSim.LidarPoint.hit)
  return _internal_hit();
}
inline void LidarPoint::set_hit(::int32_t value) {
  _internal_set_hit(value);
  // @@protoc_insertion_point(field_set:RatSim.LidarPoint.hit)
}
inline ::int32_t LidarPoint::_internal_hit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hit_;
}
inline void LidarPoint::_internal_set_hit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hit_ = value;
}

// -------------------------------------------------------------------

// LidarData

// repeated .RatSim.LidarPoint data = 1;
inline int LidarData::_internal_data_size() const {
  return _internal_data().size();
}
inline int LidarData::data_size() const {
  return _internal_data_size();
}
inline void LidarData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::RatSim::LidarPoint* LidarData::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:RatSim.LidarData.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>* LidarData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RatSim.LidarData.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::RatSim::LidarPoint& LidarData::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.LidarData.data)
  return _internal_data().Get(index);
}
inline ::RatSim::LidarPoint* LidarData::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::RatSim::LidarPoint* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:RatSim.LidarData.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>& LidarData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RatSim.LidarData.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>&
LidarData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::RatSim::LidarPoint>*
LidarData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// LidarDataAndOdom

// .RatSim.LidarData data = 1;
inline bool LidarDataAndOdom::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void LidarDataAndOdom::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::RatSim::LidarData& LidarDataAndOdom::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::LidarData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::LidarData&>(::RatSim::_LidarData_default_instance_);
}
inline const ::RatSim::LidarData& LidarDataAndOdom::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.LidarDataAndOdom.data)
  return _internal_data();
}
inline void LidarDataAndOdom::unsafe_arena_set_allocated_data(::RatSim::LidarData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::RatSim::LidarData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.LidarDataAndOdom.data)
}
inline ::RatSim::LidarData* LidarDataAndOdom::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::LidarData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::LidarData* LidarDataAndOdom::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.LidarDataAndOdom.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::LidarData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::RatSim::LidarData* LidarDataAndOdom::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::LidarData>(GetArena());
    _impl_.data_ = reinterpret_cast<::RatSim::LidarData*>(p);
  }
  return _impl_.data_;
}
inline ::RatSim::LidarData* LidarDataAndOdom::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::RatSim::LidarData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:RatSim.LidarDataAndOdom.data)
  return _msg;
}
inline void LidarDataAndOdom::set_allocated_data(::RatSim::LidarData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::RatSim::LidarData*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.LidarDataAndOdom.data)
}

// .RatSim.Odometry odom = 2;
inline bool LidarDataAndOdom::has_odom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.odom_ != nullptr);
  return value;
}
inline void LidarDataAndOdom::clear_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.odom_ != nullptr) _impl_.odom_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::RatSim::Odometry& LidarDataAndOdom::_internal_odom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::Odometry* p = _impl_.odom_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::Odometry&>(::RatSim::_Odometry_default_instance_);
}
inline const ::RatSim::Odometry& LidarDataAndOdom::odom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.LidarDataAndOdom.odom)
  return _internal_odom();
}
inline void LidarDataAndOdom::unsafe_arena_set_allocated_odom(::RatSim::Odometry* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.odom_);
  }
  _impl_.odom_ = reinterpret_cast<::RatSim::Odometry*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.LidarDataAndOdom.odom)
}
inline ::RatSim::Odometry* LidarDataAndOdom::release_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RatSim::Odometry* released = _impl_.odom_;
  _impl_.odom_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::Odometry* LidarDataAndOdom::unsafe_arena_release_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.LidarDataAndOdom.odom)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RatSim::Odometry* temp = _impl_.odom_;
  _impl_.odom_ = nullptr;
  return temp;
}
inline ::RatSim::Odometry* LidarDataAndOdom::_internal_mutable_odom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.odom_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::Odometry>(GetArena());
    _impl_.odom_ = reinterpret_cast<::RatSim::Odometry*>(p);
  }
  return _impl_.odom_;
}
inline ::RatSim::Odometry* LidarDataAndOdom::mutable_odom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::RatSim::Odometry* _msg = _internal_mutable_odom();
  // @@protoc_insertion_point(field_mutable:RatSim.LidarDataAndOdom.odom)
  return _msg;
}
inline void LidarDataAndOdom::set_allocated_odom(::RatSim::Odometry* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.odom_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.odom_ = reinterpret_cast<::RatSim::Odometry*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.LidarDataAndOdom.odom)
}

// -------------------------------------------------------------------

// DepthCameraPointData

// repeated .RatSim.Point data = 1;
inline int DepthCameraPointData::_internal_data_size() const {
  return _internal_data().size();
}
inline int DepthCameraPointData::data_size() const {
  return _internal_data_size();
}
inline void DepthCameraPointData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::RatSim::Point* DepthCameraPointData::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:RatSim.DepthCameraPointData.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::RatSim::Point>* DepthCameraPointData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RatSim.DepthCameraPointData.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::RatSim::Point& DepthCameraPointData::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.DepthCameraPointData.data)
  return _internal_data().Get(index);
}
inline ::RatSim::Point* DepthCameraPointData::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::RatSim::Point* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:RatSim.DepthCameraPointData.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::RatSim::Point>& DepthCameraPointData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RatSim.DepthCameraPointData.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::RatSim::Point>&
DepthCameraPointData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::RatSim::Point>*
DepthCameraPointData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// DepthCameraImageData

// repeated float data = 1;
inline int DepthCameraImageData::_internal_data_size() const {
  return _internal_data().size();
}
inline int DepthCameraImageData::data_size() const {
  return _internal_data_size();
}
inline void DepthCameraImageData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline float DepthCameraImageData::data(int index) const {
  // @@protoc_insertion_point(field_get:RatSim.DepthCameraImageData.data)
  return _internal_data().Get(index);
}
inline void DepthCameraImageData::set_data(int index, float value) {
  _internal_mutable_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:RatSim.DepthCameraImageData.data)
}
inline void DepthCameraImageData::add_data(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_data()->Add(value);
  // @@protoc_insertion_point(field_add:RatSim.DepthCameraImageData.data)
}
inline const ::google::protobuf::RepeatedField<float>& DepthCameraImageData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:RatSim.DepthCameraImageData.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedField<float>* DepthCameraImageData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:RatSim.DepthCameraImageData.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedField<float>&
DepthCameraImageData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedField<float>* DepthCameraImageData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// DronePose

// string name = 1;
inline void DronePose::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DronePose::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.DronePose.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DronePose::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RatSim.DronePose.name)
}
inline std::string* DronePose::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:RatSim.DronePose.name)
  return _s;
}
inline const std::string& DronePose::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DronePose::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DronePose::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DronePose::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.DronePose.name)
  return _impl_.name_.Release();
}
inline void DronePose::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:RatSim.DronePose.name)
}

// .RatSim.Pose pose = 2;
inline bool DronePose::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline void DronePose::clear_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::RatSim::Pose& DronePose::_internal_pose() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::RatSim::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::RatSim::Pose&>(::RatSim::_Pose_default_instance_);
}
inline const ::RatSim::Pose& DronePose::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RatSim.DronePose.pose)
  return _internal_pose();
}
inline void DronePose::unsafe_arena_set_allocated_pose(::RatSim::Pose* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::RatSim::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RatSim.DronePose.pose)
}
inline ::RatSim::Pose* DronePose::release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::RatSim::Pose* DronePose::unsafe_arena_release_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:RatSim.DronePose.pose)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RatSim::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::RatSim::Pose* DronePose::_internal_mutable_pose() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::RatSim::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::RatSim::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::RatSim::Pose* DronePose::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::RatSim::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:RatSim.DronePose.pose)
  return _msg;
}
inline void DronePose::set_allocated_pose(::RatSim::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pose_ = reinterpret_cast<::RatSim::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:RatSim.DronePose.pose)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace RatSim


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // RatSim_2eproto_2epb_2eh
