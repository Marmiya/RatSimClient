// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: RatSim.proto
// Protobuf C++ Version: 5.29.1

#include "RatSim.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace RatSim {

inline constexpr twist::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : linear_x_{0},
        linear_y_{0},
        linear_z_{0},
        angular_x_{0},
        angular_y_{0},
        angular_z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR twist::twist(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct twistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR twistDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~twistDefaultTypeInternal() {}
  union {
    twist _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 twistDefaultTypeInternal _twist_default_instance_;

inline constexpr Status::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;

inline constexpr RobotName::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RobotName::RobotName(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RobotNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotNameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotNameDefaultTypeInternal() {}
  union {
    RobotName _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotNameDefaultTypeInternal _RobotName_default_instance_;

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        roll_{0},
        pitch_{0},
        yaw_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;

inline constexpr Point::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point::Point(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;

inline constexpr LidarPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        hit_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LidarPoint::LidarPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LidarPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarPointDefaultTypeInternal() {}
  union {
    LidarPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarPointDefaultTypeInternal _LidarPoint_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR EmptyRequest::EmptyRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct EmptyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyRequestDefaultTypeInternal() {}
  union {
    EmptyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;

inline constexpr DepthCameraImageData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DepthCameraImageData::DepthCameraImageData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DepthCameraImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepthCameraImageDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepthCameraImageDataDefaultTypeInternal() {}
  union {
    DepthCameraImageData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepthCameraImageDataDefaultTypeInternal _DepthCameraImageData_default_instance_;

inline constexpr PointWithColor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr},
        color_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR PointWithColor::PointWithColor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointWithColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointWithColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointWithColorDefaultTypeInternal() {}
  union {
    PointWithColor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointWithColorDefaultTypeInternal _PointWithColor_default_instance_;

inline constexpr Odometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Odometry::Odometry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;

inline constexpr MeshData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        format_{0u},
        version_{0u},
        simplified_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MeshData::MeshData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDataDefaultTypeInternal() {}
  union {
    MeshData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDataDefaultTypeInternal _MeshData_default_instance_;

inline constexpr LidarData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LidarData::LidarData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LidarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarDataDefaultTypeInternal() {}
  union {
    LidarData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarDataDefaultTypeInternal _LidarData_default_instance_;

inline constexpr DronePose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DronePose::DronePose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DronePoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DronePoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DronePoseDefaultTypeInternal() {}
  union {
    DronePose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DronePoseDefaultTypeInternal _DronePose_default_instance_;

inline constexpr DepthCameraPointData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DepthCameraPointData::DepthCameraPointData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DepthCameraPointDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepthCameraPointDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepthCameraPointDataDefaultTypeInternal() {}
  union {
    DepthCameraPointData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepthCameraPointDataDefaultTypeInternal _DepthCameraPointData_default_instance_;

inline constexpr PointCloudWithColor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PointCloudWithColor::PointCloudWithColor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointCloudWithColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudWithColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudWithColorDefaultTypeInternal() {}
  union {
    PointCloudWithColor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudWithColorDefaultTypeInternal _PointCloudWithColor_default_instance_;

inline constexpr MeshDataWithOdom::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mesh_{nullptr},
        odom_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MeshDataWithOdom::MeshDataWithOdom(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshDataWithOdomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDataWithOdomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDataWithOdomDefaultTypeInternal() {}
  union {
    MeshDataWithOdom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDataWithOdomDefaultTypeInternal _MeshDataWithOdom_default_instance_;

inline constexpr LidarDataAndOdom::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_{nullptr},
        odom_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LidarDataAndOdom::LidarDataAndOdom(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LidarDataAndOdomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarDataAndOdomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarDataAndOdomDefaultTypeInternal() {}
  union {
    LidarDataAndOdom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarDataAndOdomDefaultTypeInternal _LidarDataAndOdom_default_instance_;
}  // namespace RatSim
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_RatSim_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_RatSim_2eproto = nullptr;
const ::uint32_t
    TableStruct_RatSim_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::Point, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::Point, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Point, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Point, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::RatSim::PointWithColor, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::RatSim::PointWithColor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::PointWithColor, _impl_.point_),
        PROTOBUF_FIELD_OFFSET(::RatSim::PointWithColor, _impl_.color_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::PointCloudWithColor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::PointCloudWithColor, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::EmptyRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _impl_.roll_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _impl_.pitch_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Pose, _impl_.yaw_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _impl_.linear_x_),
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _impl_.linear_y_),
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _impl_.linear_z_),
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _impl_.angular_x_),
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _impl_.angular_y_),
        PROTOBUF_FIELD_OFFSET(::RatSim::twist, _impl_.angular_z_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Odometry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Odometry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::Odometry, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::RatSim::Odometry, _impl_.twist_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::Status, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::Status, _impl_.status_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::RobotName, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::RobotName, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _impl_.format_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _impl_.simplified_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshData, _impl_.transform_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshDataWithOdom, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshDataWithOdom, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshDataWithOdom, _impl_.mesh_),
        PROTOBUF_FIELD_OFFSET(::RatSim::MeshDataWithOdom, _impl_.odom_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarPoint, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarPoint, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarPoint, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarPoint, _impl_.hit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarDataAndOdom, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarDataAndOdom, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarDataAndOdom, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::RatSim::LidarDataAndOdom, _impl_.odom_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::DepthCameraPointData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::DepthCameraPointData, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RatSim::DepthCameraImageData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::DepthCameraImageData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::RatSim::DronePose, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::RatSim::DronePose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::RatSim::DronePose, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::RatSim::DronePose, _impl_.pose_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::RatSim::Point)},
        {11, 21, -1, sizeof(::RatSim::PointWithColor)},
        {23, -1, -1, sizeof(::RatSim::PointCloudWithColor)},
        {32, -1, -1, sizeof(::RatSim::EmptyRequest)},
        {40, -1, -1, sizeof(::RatSim::Pose)},
        {54, -1, -1, sizeof(::RatSim::twist)},
        {68, 78, -1, sizeof(::RatSim::Odometry)},
        {80, -1, -1, sizeof(::RatSim::Status)},
        {89, -1, -1, sizeof(::RatSim::RobotName)},
        {98, 111, -1, sizeof(::RatSim::MeshData)},
        {116, 126, -1, sizeof(::RatSim::MeshDataWithOdom)},
        {128, -1, -1, sizeof(::RatSim::LidarPoint)},
        {140, -1, -1, sizeof(::RatSim::LidarData)},
        {149, 159, -1, sizeof(::RatSim::LidarDataAndOdom)},
        {161, -1, -1, sizeof(::RatSim::DepthCameraPointData)},
        {170, -1, -1, sizeof(::RatSim::DepthCameraImageData)},
        {179, 189, -1, sizeof(::RatSim::DronePose)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::RatSim::_Point_default_instance_._instance,
    &::RatSim::_PointWithColor_default_instance_._instance,
    &::RatSim::_PointCloudWithColor_default_instance_._instance,
    &::RatSim::_EmptyRequest_default_instance_._instance,
    &::RatSim::_Pose_default_instance_._instance,
    &::RatSim::_twist_default_instance_._instance,
    &::RatSim::_Odometry_default_instance_._instance,
    &::RatSim::_Status_default_instance_._instance,
    &::RatSim::_RobotName_default_instance_._instance,
    &::RatSim::_MeshData_default_instance_._instance,
    &::RatSim::_MeshDataWithOdom_default_instance_._instance,
    &::RatSim::_LidarPoint_default_instance_._instance,
    &::RatSim::_LidarData_default_instance_._instance,
    &::RatSim::_LidarDataAndOdom_default_instance_._instance,
    &::RatSim::_DepthCameraPointData_default_instance_._instance,
    &::RatSim::_DepthCameraImageData_default_instance_._instance,
    &::RatSim::_DronePose_default_instance_._instance,
};
const char descriptor_table_protodef_RatSim_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014RatSim.proto\022\006RatSim\"(\n\005Point\022\t\n\001x\030\001 \001"
    "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"=\n\016PointWithCol"
    "or\022\034\n\005point\030\001 \001(\0132\r.RatSim.Point\022\r\n\005colo"
    "r\030\002 \001(\r\";\n\023PointCloudWithColor\022$\n\004data\030\001"
    " \003(\0132\026.RatSim.PointWithColor\"\016\n\014EmptyReq"
    "uest\"Q\n\004Pose\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030"
    "\003 \001(\002\022\014\n\004roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003ya"
    "w\030\006 \001(\002\"v\n\005twist\022\020\n\010linear_x\030\001 \001(\002\022\020\n\010li"
    "near_y\030\002 \001(\002\022\020\n\010linear_z\030\003 \001(\002\022\021\n\tangula"
    "r_x\030\004 \001(\002\022\021\n\tangular_y\030\005 \001(\002\022\021\n\tangular_"
    "z\030\006 \001(\002\"D\n\010Odometry\022\032\n\004pose\030\001 \001(\0132\014.RatS"
    "im.Pose\022\034\n\005twist\030\002 \001(\0132\r.RatSim.twist\"\030\n"
    "\006Status\022\016\n\006status\030\001 \001(\010\"\031\n\tRobotName\022\014\n\004"
    "name\030\001 \001(\t\"n\n\010MeshData\022\014\n\004data\030\001 \001(\014\022\016\n\006"
    "format\030\002 \001(\r\022\017\n\007version\030\003 \001(\r\022\022\n\nsimplif"
    "ied\030\004 \001(\010\022\037\n\ttransform\030\005 \001(\0132\014.RatSim.Po"
    "se\"R\n\020MeshDataWithOdom\022\036\n\004mesh\030\001 \001(\0132\020.R"
    "atSim.MeshData\022\036\n\004odom\030\002 \001(\0132\020.RatSim.Od"
    "ometry\":\n\nLidarPoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
    "(\002\022\t\n\001z\030\003 \001(\002\022\013\n\003hit\030\004 \001(\005\"-\n\tLidarData\022"
    " \n\004data\030\001 \003(\0132\022.RatSim.LidarPoint\"S\n\020Lid"
    "arDataAndOdom\022\037\n\004data\030\001 \001(\0132\021.RatSim.Lid"
    "arData\022\036\n\004odom\030\002 \001(\0132\020.RatSim.Odometry\"3"
    "\n\024DepthCameraPointData\022\033\n\004data\030\001 \003(\0132\r.R"
    "atSim.Point\"$\n\024DepthCameraImageData\022\014\n\004d"
    "ata\030\001 \003(\002\"5\n\tDronePose\022\014\n\004name\030\001 \001(\t\022\032\n\004"
    "pose\030\002 \001(\0132\014.RatSim.Pose2\275\001\n\014LidarServic"
    "e\0224\n\014GetLiDARData\022\021.RatSim.RobotName\032\021.R"
    "atSim.LidarData\0223\n\014GetLiDAROdom\022\021.RatSim"
    ".RobotName\032\020.RatSim.Odometry\022B\n\023GetLiDAR"
    "DataAndOdom\022\021.RatSim.RobotName\032\030.RatSim."
    "LidarDataAndOdom2;\n\013MeshService\022,\n\010SendM"
    "esh\022\020.RatSim.MeshData\032\016.RatSim.Status2[\n"
    "\021PointCloudService\022F\n\027SendPointCloudWith"
    "Color\022\033.RatSim.PointCloudWithColor\032\016.Rat"
    "Sim.Status2\360\001\n\022DepthCameraService\022M\n\027Get"
    "DepthCameraPointData\022\024.RatSim.EmptyReque"
    "st\032\034.RatSim.DepthCameraPointData\022M\n\027GetD"
    "epthCameraImageData\022\024.RatSim.EmptyReques"
    "t\032\034.RatSim.DepthCameraImageData\022<\n\022GetDe"
    "pthCameraOdom\022\024.RatSim.EmptyRequest\032\020.Ra"
    "tSim.Odometry2w\n\014DroneService\0223\n\014GetDron"
    "eOdom\022\021.RatSim.RobotName\032\020.RatSim.Odomet"
    "ry\0222\n\rSendDronePose\022\021.RatSim.DronePose\032\016"
    ".RatSim.Statusb\006proto3"
};
static ::absl::once_flag descriptor_table_RatSim_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_RatSim_2eproto = {
    false,
    false,
    1782,
    descriptor_table_protodef_RatSim_2eproto,
    "RatSim.proto",
    &descriptor_table_RatSim_2eproto_once,
    nullptr,
    0,
    17,
    schemas,
    file_default_instances,
    TableStruct_RatSim_2eproto::offsets,
    file_level_enum_descriptors_RatSim_2eproto,
    file_level_service_descriptors_RatSim_2eproto,
};
namespace RatSim {
// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.Point)
}
Point::Point(
    ::google::protobuf::Arena* arena, const Point& from)
    : Point(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Point::~Point() {
  // @@protoc_insertion_point(destructor:RatSim.Point)
  SharedDtor(*this);
}
inline void Point::SharedDtor(MessageLite& self) {
  Point& this_ = static_cast<Point&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Point::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Point(arena);
}
constexpr auto Point::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Point),
                                            alignof(Point));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Point::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Point_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Point::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Point>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Point::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Point>(), &Point::ByteSizeLong,
            &Point::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Point, _impl_._cached_size_),
        false,
    },
    &Point::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Point::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Point::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::Point>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.Point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Point::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Point& this_ = static_cast<const Point&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Point::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Point& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.Point)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.Point)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Point::ByteSizeLong(const MessageLite& base) {
          const Point& this_ = static_cast<const Point&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Point::ByteSizeLong() const {
          const Point& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.Point)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Point::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Point::InternalSwap(Point* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)
      + sizeof(Point::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PointWithColor::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PointWithColor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_._has_bits_);
};

PointWithColor::PointWithColor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.PointWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::PointWithColor& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PointWithColor::PointWithColor(
    ::google::protobuf::Arena* arena,
    const PointWithColor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PointWithColor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::Point>(
                              arena, *from._impl_.point_)
                        : nullptr;
  _impl_.color_ = from._impl_.color_;

  // @@protoc_insertion_point(copy_constructor:RatSim.PointWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PointWithColor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, point_),
           0,
           offsetof(Impl_, color_) -
               offsetof(Impl_, point_) +
               sizeof(Impl_::color_));
}
PointWithColor::~PointWithColor() {
  // @@protoc_insertion_point(destructor:RatSim.PointWithColor)
  SharedDtor(*this);
}
inline void PointWithColor::SharedDtor(MessageLite& self) {
  PointWithColor& this_ = static_cast<PointWithColor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.point_;
  this_._impl_.~Impl_();
}

inline void* PointWithColor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PointWithColor(arena);
}
constexpr auto PointWithColor::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PointWithColor),
                                            alignof(PointWithColor));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PointWithColor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PointWithColor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PointWithColor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PointWithColor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PointWithColor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PointWithColor>(), &PointWithColor::ByteSizeLong,
            &PointWithColor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_._cached_size_),
        false,
    },
    &PointWithColor::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PointWithColor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> PointWithColor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::PointWithColor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 color = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PointWithColor, _impl_.color_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.color_)}},
    // .RatSim.Point point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .RatSim.Point point = 1;
    {PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::Point>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PointWithColor::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.PointWithColor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_.color_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PointWithColor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PointWithColor& this_ = static_cast<const PointWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PointWithColor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PointWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.PointWithColor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .RatSim.Point point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.point_, this_._impl_.point_->GetCachedSize(), target,
                stream);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.PointWithColor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PointWithColor::ByteSizeLong(const MessageLite& base) {
          const PointWithColor& this_ = static_cast<const PointWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PointWithColor::ByteSizeLong() const {
          const PointWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.PointWithColor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .RatSim.Point point = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_);
            }
          }
           {
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PointWithColor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PointWithColor*>(&to_msg);
  auto& from = static_cast<const PointWithColor&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.PointWithColor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.point_ != nullptr);
    if (_this->_impl_.point_ == nullptr) {
      _this->_impl_.point_ =
          ::google::protobuf::Message::CopyConstruct<::RatSim::Point>(arena, *from._impl_.point_);
    } else {
      _this->_impl_.point_->MergeFrom(*from._impl_.point_);
    }
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointWithColor::CopyFrom(const PointWithColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.PointWithColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PointWithColor::InternalSwap(PointWithColor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.color_)
      + sizeof(PointWithColor::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::google::protobuf::Metadata PointWithColor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PointCloudWithColor::_Internal {
 public:
};

PointCloudWithColor::PointCloudWithColor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.PointCloudWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointCloudWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::PointCloudWithColor& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

PointCloudWithColor::PointCloudWithColor(
    ::google::protobuf::Arena* arena,
    const PointCloudWithColor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PointCloudWithColor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:RatSim.PointCloudWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointCloudWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void PointCloudWithColor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PointCloudWithColor::~PointCloudWithColor() {
  // @@protoc_insertion_point(destructor:RatSim.PointCloudWithColor)
  SharedDtor(*this);
}
inline void PointCloudWithColor::SharedDtor(MessageLite& self) {
  PointCloudWithColor& this_ = static_cast<PointCloudWithColor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PointCloudWithColor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PointCloudWithColor(arena);
}
constexpr auto PointCloudWithColor::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_.data_) +
          decltype(PointCloudWithColor::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(PointCloudWithColor), alignof(PointCloudWithColor), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PointCloudWithColor::PlacementNew_,
                                 sizeof(PointCloudWithColor),
                                 alignof(PointCloudWithColor));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PointCloudWithColor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PointCloudWithColor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PointCloudWithColor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PointCloudWithColor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PointCloudWithColor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PointCloudWithColor>(), &PointCloudWithColor::ByteSizeLong,
            &PointCloudWithColor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_._cached_size_),
        false,
    },
    &PointCloudWithColor::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PointCloudWithColor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PointCloudWithColor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::PointCloudWithColor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .RatSim.PointWithColor data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .RatSim.PointWithColor data = 1;
    {PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::PointWithColor>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PointCloudWithColor::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.PointCloudWithColor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PointCloudWithColor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PointCloudWithColor& this_ = static_cast<const PointCloudWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PointCloudWithColor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PointCloudWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.PointCloudWithColor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .RatSim.PointWithColor data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.PointCloudWithColor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PointCloudWithColor::ByteSizeLong(const MessageLite& base) {
          const PointCloudWithColor& this_ = static_cast<const PointCloudWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PointCloudWithColor::ByteSizeLong() const {
          const PointCloudWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.PointCloudWithColor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .RatSim.PointWithColor data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PointCloudWithColor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PointCloudWithColor*>(&to_msg);
  auto& from = static_cast<const PointCloudWithColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.PointCloudWithColor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointCloudWithColor::CopyFrom(const PointCloudWithColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.PointCloudWithColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PointCloudWithColor::InternalSwap(PointCloudWithColor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata PointCloudWithColor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EmptyRequest::_Internal {
 public:
};

EmptyRequest::EmptyRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:RatSim.EmptyRequest)
}
EmptyRequest::EmptyRequest(
    ::google::protobuf::Arena* arena,
    const EmptyRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EmptyRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:RatSim.EmptyRequest)
}

inline void* EmptyRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EmptyRequest(arena);
}
constexpr auto EmptyRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EmptyRequest),
                                            alignof(EmptyRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EmptyRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EmptyRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EmptyRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<EmptyRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EmptyRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<EmptyRequest>(), &EmptyRequest::ByteSizeLong,
            &EmptyRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EmptyRequest, _impl_._cached_size_),
        false,
    },
    &EmptyRequest::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EmptyRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> EmptyRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::EmptyRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata EmptyRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Pose::_Internal {
 public:
};

Pose::Pose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.Pose)
}
Pose::Pose(
    ::google::protobuf::Arena* arena, const Pose& from)
    : Pose(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::yaw_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:RatSim.Pose)
  SharedDtor(*this);
}
inline void Pose::SharedDtor(MessageLite& self) {
  Pose& this_ = static_cast<Pose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Pose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Pose(arena);
}
constexpr auto Pose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Pose),
                                            alignof(Pose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Pose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Pose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Pose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Pose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Pose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Pose>(), &Pose::ByteSizeLong,
            &Pose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Pose, _impl_._cached_size_),
        false,
    },
    &Pose::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Pose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Pose::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::Pose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.z_)}},
    // float roll = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.roll_)}},
    // float pitch = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.pitch_)}},
    // float yaw = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.yaw_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float roll = 4;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.roll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch = 5;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw = 6;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.Pose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Pose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Pose& this_ = static_cast<const Pose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Pose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Pose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.Pose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          // float roll = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_roll()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_roll(), target);
          }

          // float pitch = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pitch()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_pitch(), target);
          }

          // float yaw = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_yaw(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.Pose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Pose::ByteSizeLong(const MessageLite& base) {
          const Pose& this_ = static_cast<const Pose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Pose::ByteSizeLong() const {
          const Pose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.Pose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
            // float roll = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_roll()) != 0) {
              total_size += 5;
            }
            // float pitch = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pitch()) != 0) {
              total_size += 5;
            }
            // float yaw = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Pose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_roll()) != 0) {
    _this->_impl_.roll_ = from._impl_.roll_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pitch()) != 0) {
    _this->_impl_.pitch_ = from._impl_.pitch_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw()) != 0) {
    _this->_impl_.yaw_ = from._impl_.yaw_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.yaw_)
      + sizeof(Pose::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class twist::_Internal {
 public:
};

twist::twist(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.twist)
}
twist::twist(
    ::google::protobuf::Arena* arena, const twist& from)
    : twist(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE twist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void twist::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, linear_x_),
           0,
           offsetof(Impl_, angular_z_) -
               offsetof(Impl_, linear_x_) +
               sizeof(Impl_::angular_z_));
}
twist::~twist() {
  // @@protoc_insertion_point(destructor:RatSim.twist)
  SharedDtor(*this);
}
inline void twist::SharedDtor(MessageLite& self) {
  twist& this_ = static_cast<twist&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* twist::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) twist(arena);
}
constexpr auto twist::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(twist),
                                            alignof(twist));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull twist::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_twist_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &twist::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<twist>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &twist::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<twist>(), &twist::ByteSizeLong,
            &twist::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(twist, _impl_._cached_size_),
        false,
    },
    &twist::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* twist::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> twist::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::twist>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float linear_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_x_)}},
    // float linear_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_y_)}},
    // float linear_z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_z_)}},
    // float angular_x = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_x_)}},
    // float angular_y = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_y_)}},
    // float angular_z = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_z_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float linear_x = 1;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float linear_y = 2;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float linear_z = 3;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_x = 4;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_y = 5;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_z = 6;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void twist::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.twist)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.linear_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.angular_z_) -
      reinterpret_cast<char*>(&_impl_.linear_x_)) + sizeof(_impl_.angular_z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* twist::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const twist& this_ = static_cast<const twist&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* twist::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const twist& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.twist)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float linear_x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_linear_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_linear_x(), target);
          }

          // float linear_y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_linear_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_linear_y(), target);
          }

          // float linear_z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_linear_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_linear_z(), target);
          }

          // float angular_x = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angular_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_angular_x(), target);
          }

          // float angular_y = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angular_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_angular_y(), target);
          }

          // float angular_z = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angular_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_angular_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.twist)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t twist::ByteSizeLong(const MessageLite& base) {
          const twist& this_ = static_cast<const twist&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t twist::ByteSizeLong() const {
          const twist& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.twist)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float linear_x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_linear_x()) != 0) {
              total_size += 5;
            }
            // float linear_y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_linear_y()) != 0) {
              total_size += 5;
            }
            // float linear_z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_linear_z()) != 0) {
              total_size += 5;
            }
            // float angular_x = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angular_x()) != 0) {
              total_size += 5;
            }
            // float angular_y = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angular_y()) != 0) {
              total_size += 5;
            }
            // float angular_z = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angular_z()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void twist::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<twist*>(&to_msg);
  auto& from = static_cast<const twist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.twist)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_linear_x()) != 0) {
    _this->_impl_.linear_x_ = from._impl_.linear_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_linear_y()) != 0) {
    _this->_impl_.linear_y_ = from._impl_.linear_y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_linear_z()) != 0) {
    _this->_impl_.linear_z_ = from._impl_.linear_z_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angular_x()) != 0) {
    _this->_impl_.angular_x_ = from._impl_.angular_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angular_y()) != 0) {
    _this->_impl_.angular_y_ = from._impl_.angular_y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angular_z()) != 0) {
    _this->_impl_.angular_z_ = from._impl_.angular_z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void twist::CopyFrom(const twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void twist::InternalSwap(twist* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_z_)
      + sizeof(twist::_impl_.angular_z_)
      - PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_x_)>(
          reinterpret_cast<char*>(&_impl_.linear_x_),
          reinterpret_cast<char*>(&other->_impl_.linear_x_));
}

::google::protobuf::Metadata twist::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Odometry::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Odometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_);
};

Odometry::Odometry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::Odometry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Odometry::Odometry(
    ::google::protobuf::Arena* arena,
    const Odometry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Odometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::twist>(
                              arena, *from._impl_.twist_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:RatSim.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Odometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::twist_));
}
Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:RatSim.Odometry)
  SharedDtor(*this);
}
inline void Odometry::SharedDtor(MessageLite& self) {
  Odometry& this_ = static_cast<Odometry&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pose_;
  delete this_._impl_.twist_;
  this_._impl_.~Impl_();
}

inline void* Odometry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Odometry(arena);
}
constexpr auto Odometry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Odometry),
                                            alignof(Odometry));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Odometry::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Odometry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Odometry::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Odometry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Odometry::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Odometry>(), &Odometry::ByteSizeLong,
            &Odometry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Odometry, _impl_._cached_size_),
        false,
    },
    &Odometry::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Odometry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Odometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::Odometry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .RatSim.twist twist = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)}},
    // .RatSim.Pose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .RatSim.Pose pose = 1;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RatSim.twist twist = 2;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::Pose>()},
    {::_pbi::TcParser::GetTable<::RatSim::twist>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.Odometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Odometry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Odometry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.Odometry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .RatSim.Pose pose = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          // .RatSim.twist twist = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.twist_, this_._impl_.twist_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.Odometry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Odometry::ByteSizeLong(const MessageLite& base) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Odometry::ByteSizeLong() const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.Odometry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .RatSim.Pose pose = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
            // .RatSim.twist twist = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.twist_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Odometry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.Odometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::RatSim::Pose>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.twist_ != nullptr);
      if (_this->_impl_.twist_ == nullptr) {
        _this->_impl_.twist_ =
            ::google::protobuf::Message::CopyConstruct<::RatSim::twist>(arena, *from._impl_.twist_);
      } else {
        _this->_impl_.twist_->MergeFrom(*from._impl_.twist_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Odometry::InternalSwap(Odometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)
      + sizeof(Odometry::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.Status)
}
Status::Status(
    ::google::protobuf::Arena* arena, const Status& from)
    : Status(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Status::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
Status::~Status() {
  // @@protoc_insertion_point(destructor:RatSim.Status)
  SharedDtor(*this);
}
inline void Status::SharedDtor(MessageLite& self) {
  Status& this_ = static_cast<Status&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Status::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Status(arena);
}
constexpr auto Status::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Status),
                                            alignof(Status));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Status::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Status_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Status::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Status>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Status::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Status>(), &Status::ByteSizeLong,
            &Status::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Status, _impl_._cached_size_),
        false,
    },
    &Status::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Status::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Status::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::Status>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Status, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool status = 1;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.Status)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Status::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Status& this_ = static_cast<const Status&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Status::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Status& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.Status)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool status = 1;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_status(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.Status)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Status::ByteSizeLong(const MessageLite& base) {
          const Status& this_ = static_cast<const Status&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Status::ByteSizeLong() const {
          const Status& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.Status)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool status = 1;
            if (this_._internal_status() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Status::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Status::InternalSwap(Status* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RobotName::_Internal {
 public:
};

RobotName::RobotName(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.RobotName)
}
inline PROTOBUF_NDEBUG_INLINE RobotName::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::RobotName& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

RobotName::RobotName(
    ::google::protobuf::Arena* arena,
    const RobotName& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RobotName* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:RatSim.RobotName)
}
inline PROTOBUF_NDEBUG_INLINE RobotName::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void RobotName::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RobotName::~RobotName() {
  // @@protoc_insertion_point(destructor:RatSim.RobotName)
  SharedDtor(*this);
}
inline void RobotName::SharedDtor(MessageLite& self) {
  RobotName& this_ = static_cast<RobotName&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RobotName::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RobotName(arena);
}
constexpr auto RobotName::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RobotName),
                                            alignof(RobotName));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RobotName::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RobotName_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RobotName::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RobotName>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RobotName::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RobotName>(), &RobotName::ByteSizeLong,
            &RobotName::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RobotName, _impl_._cached_size_),
        false,
    },
    &RobotName::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RobotName::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 29, 2> RobotName::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::RobotName>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RobotName, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(RobotName, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\4\0\0\0\0\0\0"
    "RatSim.RobotName"
    "name"
  }},
};

PROTOBUF_NOINLINE void RobotName::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.RobotName)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RobotName::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RobotName& this_ = static_cast<const RobotName&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RobotName::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RobotName& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.RobotName)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "RatSim.RobotName.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.RobotName)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RobotName::ByteSizeLong(const MessageLite& base) {
          const RobotName& this_ = static_cast<const RobotName&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RobotName::ByteSizeLong() const {
          const RobotName& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.RobotName)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RobotName::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RobotName*>(&to_msg);
  auto& from = static_cast<const RobotName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.RobotName)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotName::CopyFrom(const RobotName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.RobotName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RobotName::InternalSwap(RobotName* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata RobotName::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MeshData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MeshData, _impl_._has_bits_);
};

MeshData::MeshData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.MeshData)
}
inline PROTOBUF_NDEBUG_INLINE MeshData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::MeshData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_) {}

MeshData::MeshData(
    ::google::protobuf::Arena* arena,
    const MeshData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::Pose>(
                              arena, *from._impl_.transform_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, format_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, format_),
           offsetof(Impl_, simplified_) -
               offsetof(Impl_, format_) +
               sizeof(Impl_::simplified_));

  // @@protoc_insertion_point(copy_constructor:RatSim.MeshData)
}
inline PROTOBUF_NDEBUG_INLINE MeshData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_(arena) {}

inline void MeshData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, simplified_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::simplified_));
}
MeshData::~MeshData() {
  // @@protoc_insertion_point(destructor:RatSim.MeshData)
  SharedDtor(*this);
}
inline void MeshData::SharedDtor(MessageLite& self) {
  MeshData& this_ = static_cast<MeshData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  delete this_._impl_.transform_;
  this_._impl_.~Impl_();
}

inline void* MeshData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshData(arena);
}
constexpr auto MeshData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MeshData),
                                            alignof(MeshData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshData>(), &MeshData::ByteSizeLong,
            &MeshData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshData, _impl_._cached_size_),
        false,
    },
    &MeshData::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> MeshData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MeshData, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::MeshData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.data_)}},
    // uint32 format = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MeshData, _impl_.format_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.format_)}},
    // uint32 version = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MeshData, _impl_.version_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.version_)}},
    // bool simplified = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MeshData, _impl_.simplified_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.simplified_)}},
    // .RatSim.Pose transform = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.transform_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes data = 1;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 format = 2;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 version = 3;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool simplified = 4;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.simplified_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .RatSim.Pose transform = 5;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::Pose>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MeshData::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.MeshData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  ::memset(&_impl_.format_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.simplified_) -
      reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.simplified_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshData& this_ = static_cast<const MeshData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.MeshData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes data = 1;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // uint32 format = 2;
          if (this_._internal_format() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_format(), target);
          }

          // uint32 version = 3;
          if (this_._internal_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_version(), target);
          }

          // bool simplified = 4;
          if (this_._internal_simplified() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_simplified(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .RatSim.Pose transform = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.transform_, this_._impl_.transform_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.MeshData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshData::ByteSizeLong(const MessageLite& base) {
          const MeshData& this_ = static_cast<const MeshData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshData::ByteSizeLong() const {
          const MeshData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.MeshData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 1;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
          }
           {
            // .RatSim.Pose transform = 5;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.transform_);
            }
          }
           {
            // uint32 format = 2;
            if (this_._internal_format() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_format());
            }
            // uint32 version = 3;
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_version());
            }
            // bool simplified = 4;
            if (this_._internal_simplified() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshData*>(&to_msg);
  auto& from = static_cast<const MeshData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.MeshData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.transform_ != nullptr);
    if (_this->_impl_.transform_ == nullptr) {
      _this->_impl_.transform_ =
          ::google::protobuf::Message::CopyConstruct<::RatSim::Pose>(arena, *from._impl_.transform_);
    } else {
      _this->_impl_.transform_->MergeFrom(*from._impl_.transform_);
    }
  }
  if (from._internal_format() != 0) {
    _this->_impl_.format_ = from._impl_.format_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  if (from._internal_simplified() != 0) {
    _this->_impl_.simplified_ = from._impl_.simplified_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshData::CopyFrom(const MeshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.MeshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshData::InternalSwap(MeshData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshData, _impl_.simplified_)
      + sizeof(MeshData::_impl_.simplified_)
      - PROTOBUF_FIELD_OFFSET(MeshData, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf::Metadata MeshData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshDataWithOdom::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MeshDataWithOdom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_._has_bits_);
};

MeshDataWithOdom::MeshDataWithOdom(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.MeshDataWithOdom)
}
inline PROTOBUF_NDEBUG_INLINE MeshDataWithOdom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::MeshDataWithOdom& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MeshDataWithOdom::MeshDataWithOdom(
    ::google::protobuf::Arena* arena,
    const MeshDataWithOdom& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshDataWithOdom* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.mesh_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::MeshData>(
                              arena, *from._impl_.mesh_)
                        : nullptr;
  _impl_.odom_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::Odometry>(
                              arena, *from._impl_.odom_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:RatSim.MeshDataWithOdom)
}
inline PROTOBUF_NDEBUG_INLINE MeshDataWithOdom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MeshDataWithOdom::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mesh_),
           0,
           offsetof(Impl_, odom_) -
               offsetof(Impl_, mesh_) +
               sizeof(Impl_::odom_));
}
MeshDataWithOdom::~MeshDataWithOdom() {
  // @@protoc_insertion_point(destructor:RatSim.MeshDataWithOdom)
  SharedDtor(*this);
}
inline void MeshDataWithOdom::SharedDtor(MessageLite& self) {
  MeshDataWithOdom& this_ = static_cast<MeshDataWithOdom&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.mesh_;
  delete this_._impl_.odom_;
  this_._impl_.~Impl_();
}

inline void* MeshDataWithOdom::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshDataWithOdom(arena);
}
constexpr auto MeshDataWithOdom::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MeshDataWithOdom),
                                            alignof(MeshDataWithOdom));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshDataWithOdom::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshDataWithOdom_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshDataWithOdom::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshDataWithOdom>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshDataWithOdom::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshDataWithOdom>(), &MeshDataWithOdom::ByteSizeLong,
            &MeshDataWithOdom::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_._cached_size_),
        false,
    },
    &MeshDataWithOdom::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshDataWithOdom::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MeshDataWithOdom::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::MeshDataWithOdom>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .RatSim.Odometry odom = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_.odom_)}},
    // .RatSim.MeshData mesh = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_.mesh_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .RatSim.MeshData mesh = 1;
    {PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_.mesh_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RatSim.Odometry odom = 2;
    {PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_.odom_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::MeshData>()},
    {::_pbi::TcParser::GetTable<::RatSim::Odometry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MeshDataWithOdom::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.MeshDataWithOdom)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.mesh_ != nullptr);
      _impl_.mesh_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.odom_ != nullptr);
      _impl_.odom_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshDataWithOdom::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshDataWithOdom& this_ = static_cast<const MeshDataWithOdom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshDataWithOdom::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshDataWithOdom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.MeshDataWithOdom)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .RatSim.MeshData mesh = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.mesh_, this_._impl_.mesh_->GetCachedSize(), target,
                stream);
          }

          // .RatSim.Odometry odom = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.odom_, this_._impl_.odom_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.MeshDataWithOdom)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshDataWithOdom::ByteSizeLong(const MessageLite& base) {
          const MeshDataWithOdom& this_ = static_cast<const MeshDataWithOdom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshDataWithOdom::ByteSizeLong() const {
          const MeshDataWithOdom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.MeshDataWithOdom)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .RatSim.MeshData mesh = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mesh_);
            }
            // .RatSim.Odometry odom = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.odom_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshDataWithOdom::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshDataWithOdom*>(&to_msg);
  auto& from = static_cast<const MeshDataWithOdom&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.MeshDataWithOdom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.mesh_ != nullptr);
      if (_this->_impl_.mesh_ == nullptr) {
        _this->_impl_.mesh_ =
            ::google::protobuf::Message::CopyConstruct<::RatSim::MeshData>(arena, *from._impl_.mesh_);
      } else {
        _this->_impl_.mesh_->MergeFrom(*from._impl_.mesh_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.odom_ != nullptr);
      if (_this->_impl_.odom_ == nullptr) {
        _this->_impl_.odom_ =
            ::google::protobuf::Message::CopyConstruct<::RatSim::Odometry>(arena, *from._impl_.odom_);
      } else {
        _this->_impl_.odom_->MergeFrom(*from._impl_.odom_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshDataWithOdom::CopyFrom(const MeshDataWithOdom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.MeshDataWithOdom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshDataWithOdom::InternalSwap(MeshDataWithOdom* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_.odom_)
      + sizeof(MeshDataWithOdom::_impl_.odom_)
      - PROTOBUF_FIELD_OFFSET(MeshDataWithOdom, _impl_.mesh_)>(
          reinterpret_cast<char*>(&_impl_.mesh_),
          reinterpret_cast<char*>(&other->_impl_.mesh_));
}

::google::protobuf::Metadata MeshDataWithOdom::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LidarPoint::_Internal {
 public:
};

LidarPoint::LidarPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.LidarPoint)
}
LidarPoint::LidarPoint(
    ::google::protobuf::Arena* arena, const LidarPoint& from)
    : LidarPoint(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LidarPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LidarPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, hit_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::hit_));
}
LidarPoint::~LidarPoint() {
  // @@protoc_insertion_point(destructor:RatSim.LidarPoint)
  SharedDtor(*this);
}
inline void LidarPoint::SharedDtor(MessageLite& self) {
  LidarPoint& this_ = static_cast<LidarPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* LidarPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LidarPoint(arena);
}
constexpr auto LidarPoint::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LidarPoint),
                                            alignof(LidarPoint));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LidarPoint::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LidarPoint_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LidarPoint::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LidarPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LidarPoint::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LidarPoint>(), &LidarPoint::ByteSizeLong,
            &LidarPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_._cached_size_),
        false,
    },
    &LidarPoint::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LidarPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> LidarPoint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::LidarPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 hit = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LidarPoint, _impl_.hit_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.hit_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 hit = 4;
    {PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.hit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void LidarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.LidarPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.hit_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hit_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LidarPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LidarPoint& this_ = static_cast<const LidarPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LidarPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LidarPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.LidarPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          // int32 hit = 4;
          if (this_._internal_hit() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_hit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.LidarPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LidarPoint::ByteSizeLong(const MessageLite& base) {
          const LidarPoint& this_ = static_cast<const LidarPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LidarPoint::ByteSizeLong() const {
          const LidarPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.LidarPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
            // int32 hit = 4;
            if (this_._internal_hit() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LidarPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LidarPoint*>(&to_msg);
  auto& from = static_cast<const LidarPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.LidarPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  if (from._internal_hit() != 0) {
    _this->_impl_.hit_ = from._impl_.hit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LidarPoint::CopyFrom(const LidarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.LidarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LidarPoint::InternalSwap(LidarPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.hit_)
      + sizeof(LidarPoint::_impl_.hit_)
      - PROTOBUF_FIELD_OFFSET(LidarPoint, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata LidarPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LidarData::_Internal {
 public:
};

LidarData::LidarData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.LidarData)
}
inline PROTOBUF_NDEBUG_INLINE LidarData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::LidarData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

LidarData::LidarData(
    ::google::protobuf::Arena* arena,
    const LidarData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LidarData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:RatSim.LidarData)
}
inline PROTOBUF_NDEBUG_INLINE LidarData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void LidarData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LidarData::~LidarData() {
  // @@protoc_insertion_point(destructor:RatSim.LidarData)
  SharedDtor(*this);
}
inline void LidarData::SharedDtor(MessageLite& self) {
  LidarData& this_ = static_cast<LidarData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* LidarData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LidarData(arena);
}
constexpr auto LidarData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LidarData, _impl_.data_) +
          decltype(LidarData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LidarData), alignof(LidarData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LidarData::PlacementNew_,
                                 sizeof(LidarData),
                                 alignof(LidarData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LidarData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LidarData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LidarData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LidarData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LidarData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LidarData>(), &LidarData::ByteSizeLong,
            &LidarData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LidarData, _impl_._cached_size_),
        false,
    },
    &LidarData::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LidarData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> LidarData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::LidarData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .RatSim.LidarPoint data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LidarData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .RatSim.LidarPoint data = 1;
    {PROTOBUF_FIELD_OFFSET(LidarData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::LidarPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LidarData::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.LidarData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LidarData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LidarData& this_ = static_cast<const LidarData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LidarData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LidarData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.LidarData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .RatSim.LidarPoint data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.LidarData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LidarData::ByteSizeLong(const MessageLite& base) {
          const LidarData& this_ = static_cast<const LidarData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LidarData::ByteSizeLong() const {
          const LidarData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.LidarData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .RatSim.LidarPoint data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LidarData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LidarData*>(&to_msg);
  auto& from = static_cast<const LidarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.LidarData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LidarData::CopyFrom(const LidarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.LidarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LidarData::InternalSwap(LidarData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata LidarData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LidarDataAndOdom::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LidarDataAndOdom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_._has_bits_);
};

LidarDataAndOdom::LidarDataAndOdom(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.LidarDataAndOdom)
}
inline PROTOBUF_NDEBUG_INLINE LidarDataAndOdom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::LidarDataAndOdom& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LidarDataAndOdom::LidarDataAndOdom(
    ::google::protobuf::Arena* arena,
    const LidarDataAndOdom& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LidarDataAndOdom* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::LidarData>(
                              arena, *from._impl_.data_)
                        : nullptr;
  _impl_.odom_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::Odometry>(
                              arena, *from._impl_.odom_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:RatSim.LidarDataAndOdom)
}
inline PROTOBUF_NDEBUG_INLINE LidarDataAndOdom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LidarDataAndOdom::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_),
           0,
           offsetof(Impl_, odom_) -
               offsetof(Impl_, data_) +
               sizeof(Impl_::odom_));
}
LidarDataAndOdom::~LidarDataAndOdom() {
  // @@protoc_insertion_point(destructor:RatSim.LidarDataAndOdom)
  SharedDtor(*this);
}
inline void LidarDataAndOdom::SharedDtor(MessageLite& self) {
  LidarDataAndOdom& this_ = static_cast<LidarDataAndOdom&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.data_;
  delete this_._impl_.odom_;
  this_._impl_.~Impl_();
}

inline void* LidarDataAndOdom::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LidarDataAndOdom(arena);
}
constexpr auto LidarDataAndOdom::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LidarDataAndOdom),
                                            alignof(LidarDataAndOdom));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LidarDataAndOdom::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LidarDataAndOdom_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LidarDataAndOdom::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LidarDataAndOdom>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LidarDataAndOdom::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LidarDataAndOdom>(), &LidarDataAndOdom::ByteSizeLong,
            &LidarDataAndOdom::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_._cached_size_),
        false,
    },
    &LidarDataAndOdom::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LidarDataAndOdom::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> LidarDataAndOdom::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::LidarDataAndOdom>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .RatSim.Odometry odom = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.odom_)}},
    // .RatSim.LidarData data = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .RatSim.LidarData data = 1;
    {PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .RatSim.Odometry odom = 2;
    {PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.odom_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::LidarData>()},
    {::_pbi::TcParser::GetTable<::RatSim::Odometry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LidarDataAndOdom::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.LidarDataAndOdom)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.odom_ != nullptr);
      _impl_.odom_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LidarDataAndOdom::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LidarDataAndOdom& this_ = static_cast<const LidarDataAndOdom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LidarDataAndOdom::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LidarDataAndOdom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.LidarDataAndOdom)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .RatSim.LidarData data = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.data_, this_._impl_.data_->GetCachedSize(), target,
                stream);
          }

          // .RatSim.Odometry odom = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.odom_, this_._impl_.odom_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.LidarDataAndOdom)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LidarDataAndOdom::ByteSizeLong(const MessageLite& base) {
          const LidarDataAndOdom& this_ = static_cast<const LidarDataAndOdom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LidarDataAndOdom::ByteSizeLong() const {
          const LidarDataAndOdom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.LidarDataAndOdom)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .RatSim.LidarData data = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_);
            }
            // .RatSim.Odometry odom = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.odom_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LidarDataAndOdom::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LidarDataAndOdom*>(&to_msg);
  auto& from = static_cast<const LidarDataAndOdom&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.LidarDataAndOdom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.data_ != nullptr);
      if (_this->_impl_.data_ == nullptr) {
        _this->_impl_.data_ =
            ::google::protobuf::Message::CopyConstruct<::RatSim::LidarData>(arena, *from._impl_.data_);
      } else {
        _this->_impl_.data_->MergeFrom(*from._impl_.data_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.odom_ != nullptr);
      if (_this->_impl_.odom_ == nullptr) {
        _this->_impl_.odom_ =
            ::google::protobuf::Message::CopyConstruct<::RatSim::Odometry>(arena, *from._impl_.odom_);
      } else {
        _this->_impl_.odom_->MergeFrom(*from._impl_.odom_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LidarDataAndOdom::CopyFrom(const LidarDataAndOdom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.LidarDataAndOdom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LidarDataAndOdom::InternalSwap(LidarDataAndOdom* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.odom_)
      + sizeof(LidarDataAndOdom::_impl_.odom_)
      - PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::google::protobuf::Metadata LidarDataAndOdom::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DepthCameraPointData::_Internal {
 public:
};

DepthCameraPointData::DepthCameraPointData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.DepthCameraPointData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraPointData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::DepthCameraPointData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

DepthCameraPointData::DepthCameraPointData(
    ::google::protobuf::Arena* arena,
    const DepthCameraPointData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DepthCameraPointData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:RatSim.DepthCameraPointData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraPointData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void DepthCameraPointData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DepthCameraPointData::~DepthCameraPointData() {
  // @@protoc_insertion_point(destructor:RatSim.DepthCameraPointData)
  SharedDtor(*this);
}
inline void DepthCameraPointData::SharedDtor(MessageLite& self) {
  DepthCameraPointData& this_ = static_cast<DepthCameraPointData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DepthCameraPointData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DepthCameraPointData(arena);
}
constexpr auto DepthCameraPointData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_.data_) +
          decltype(DepthCameraPointData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DepthCameraPointData), alignof(DepthCameraPointData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DepthCameraPointData::PlacementNew_,
                                 sizeof(DepthCameraPointData),
                                 alignof(DepthCameraPointData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DepthCameraPointData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DepthCameraPointData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DepthCameraPointData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DepthCameraPointData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DepthCameraPointData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DepthCameraPointData>(), &DepthCameraPointData::ByteSizeLong,
            &DepthCameraPointData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_._cached_size_),
        false,
    },
    &DepthCameraPointData::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DepthCameraPointData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DepthCameraPointData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::DepthCameraPointData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .RatSim.Point data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .RatSim.Point data = 1;
    {PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::Point>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DepthCameraPointData::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.DepthCameraPointData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DepthCameraPointData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DepthCameraPointData& this_ = static_cast<const DepthCameraPointData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DepthCameraPointData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DepthCameraPointData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.DepthCameraPointData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .RatSim.Point data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.DepthCameraPointData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DepthCameraPointData::ByteSizeLong(const MessageLite& base) {
          const DepthCameraPointData& this_ = static_cast<const DepthCameraPointData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DepthCameraPointData::ByteSizeLong() const {
          const DepthCameraPointData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.DepthCameraPointData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .RatSim.Point data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DepthCameraPointData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DepthCameraPointData*>(&to_msg);
  auto& from = static_cast<const DepthCameraPointData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.DepthCameraPointData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DepthCameraPointData::CopyFrom(const DepthCameraPointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.DepthCameraPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DepthCameraPointData::InternalSwap(DepthCameraPointData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata DepthCameraPointData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DepthCameraImageData::_Internal {
 public:
};

DepthCameraImageData::DepthCameraImageData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.DepthCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::DepthCameraImageData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

DepthCameraImageData::DepthCameraImageData(
    ::google::protobuf::Arena* arena,
    const DepthCameraImageData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DepthCameraImageData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:RatSim.DepthCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void DepthCameraImageData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DepthCameraImageData::~DepthCameraImageData() {
  // @@protoc_insertion_point(destructor:RatSim.DepthCameraImageData)
  SharedDtor(*this);
}
inline void DepthCameraImageData::SharedDtor(MessageLite& self) {
  DepthCameraImageData& this_ = static_cast<DepthCameraImageData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DepthCameraImageData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DepthCameraImageData(arena);
}
constexpr auto DepthCameraImageData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_.data_) +
          decltype(DepthCameraImageData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DepthCameraImageData), alignof(DepthCameraImageData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DepthCameraImageData::PlacementNew_,
                                 sizeof(DepthCameraImageData),
                                 alignof(DepthCameraImageData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DepthCameraImageData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DepthCameraImageData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DepthCameraImageData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DepthCameraImageData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DepthCameraImageData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DepthCameraImageData>(), &DepthCameraImageData::ByteSizeLong,
            &DepthCameraImageData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_._cached_size_),
        false,
    },
    &DepthCameraImageData::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DepthCameraImageData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DepthCameraImageData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::DepthCameraImageData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float data = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float data = 1;
    {PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DepthCameraImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.DepthCameraImageData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DepthCameraImageData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DepthCameraImageData& this_ = static_cast<const DepthCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DepthCameraImageData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DepthCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.DepthCameraImageData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float data = 1;
          if (this_._internal_data_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_data(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.DepthCameraImageData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DepthCameraImageData::ByteSizeLong(const MessageLite& base) {
          const DepthCameraImageData& this_ = static_cast<const DepthCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DepthCameraImageData::ByteSizeLong() const {
          const DepthCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.DepthCameraImageData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float data = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_data_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DepthCameraImageData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DepthCameraImageData*>(&to_msg);
  auto& from = static_cast<const DepthCameraImageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.DepthCameraImageData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DepthCameraImageData::CopyFrom(const DepthCameraImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.DepthCameraImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DepthCameraImageData::InternalSwap(DepthCameraImageData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata DepthCameraImageData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DronePose::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DronePose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DronePose, _impl_._has_bits_);
};

DronePose::DronePose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RatSim.DronePose)
}
inline PROTOBUF_NDEBUG_INLINE DronePose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::RatSim::DronePose& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

DronePose::DronePose(
    ::google::protobuf::Arena* arena,
    const DronePose& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DronePose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::RatSim::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:RatSim.DronePose)
}
inline PROTOBUF_NDEBUG_INLINE DronePose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void DronePose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pose_ = {};
}
DronePose::~DronePose() {
  // @@protoc_insertion_point(destructor:RatSim.DronePose)
  SharedDtor(*this);
}
inline void DronePose::SharedDtor(MessageLite& self) {
  DronePose& this_ = static_cast<DronePose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  delete this_._impl_.pose_;
  this_._impl_.~Impl_();
}

inline void* DronePose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DronePose(arena);
}
constexpr auto DronePose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DronePose),
                                            alignof(DronePose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DronePose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DronePose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DronePose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DronePose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DronePose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DronePose>(), &DronePose::ByteSizeLong,
            &DronePose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DronePose, _impl_._cached_size_),
        false,
    },
    &DronePose::kDescriptorMethods,
    &descriptor_table_RatSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DronePose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 29, 2> DronePose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DronePose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::RatSim::DronePose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .RatSim.Pose pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(DronePose, _impl_.pose_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DronePose, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(DronePose, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .RatSim.Pose pose = 2;
    {PROTOBUF_FIELD_OFFSET(DronePose, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::RatSim::Pose>()},
  }}, {{
    "\20\4\0\0\0\0\0\0"
    "RatSim.DronePose"
    "name"
  }},
};

PROTOBUF_NOINLINE void DronePose::Clear() {
// @@protoc_insertion_point(message_clear_start:RatSim.DronePose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DronePose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DronePose& this_ = static_cast<const DronePose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DronePose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DronePose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:RatSim.DronePose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "RatSim.DronePose.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .RatSim.Pose pose = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:RatSim.DronePose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DronePose::ByteSizeLong(const MessageLite& base) {
          const DronePose& this_ = static_cast<const DronePose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DronePose::ByteSizeLong() const {
          const DronePose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:RatSim.DronePose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .RatSim.Pose pose = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DronePose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DronePose*>(&to_msg);
  auto& from = static_cast<const DronePose&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:RatSim.DronePose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pose_ != nullptr);
    if (_this->_impl_.pose_ == nullptr) {
      _this->_impl_.pose_ =
          ::google::protobuf::Message::CopyConstruct<::RatSim::Pose>(arena, *from._impl_.pose_);
    } else {
      _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DronePose::CopyFrom(const DronePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RatSim.DronePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DronePose::InternalSwap(DronePose* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.pose_, other->_impl_.pose_);
}

::google::protobuf::Metadata DronePose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace RatSim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_RatSim_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
